{"version":3,"file":"frappe-gantt.min.js","sources":["../src/date_utils.js","../src/svg_utils.js","../src/bar.js","../src/arrow.js","../src/popup.js","../src/index.js"],"sourcesContent":["const YEAR = 'year';\nconst MONTH = 'month';\nconst DAY = 'day';\nconst HOUR = 'hour';\nconst MINUTE = 'minute';\nconst SECOND = 'second';\nconst MILLISECOND = 'millisecond';\n\nconst month_names = {\n    en: [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December',\n    ],\n    es: [\n        'Enero',\n        'Febrero',\n        'Marzo',\n        'Abril',\n        'Mayo',\n        'Junio',\n        'Julio',\n        'Agosto',\n        'Septiembre',\n        'Octubre',\n        'Noviembre',\n        'Diciembre',\n    ],\n    it: [\n        'Gennaio',\n        'Febbraio',\n        'Marzo',\n        'Aprile',\n        'Maggio',\n        'Giugno',\n        'Luglio',\n        'Agosto',\n        'Settembre',\n        'Ottobre',\n        'Novembre',\n        'Dicembre',\n    ],\n    ru: [\n        'Январь',\n        'Февраль',\n        'Март',\n        'Апрель',\n        'Май',\n        'Июнь',\n        'Июль',\n        'Август',\n        'Сентябрь',\n        'Октябрь',\n        'Ноябрь',\n        'Декабрь',\n    ],\n    ptBr: [\n        'Janeiro',\n        'Fevereiro',\n        'Março',\n        'Abril',\n        'Maio',\n        'Junho',\n        'Julho',\n        'Agosto',\n        'Setembro',\n        'Outubro',\n        'Novembro',\n        'Dezembro',\n    ],\n    fr: [\n        'Janvier',\n        'Février',\n        'Mars',\n        'Avril',\n        'Mai',\n        'Juin',\n        'Juillet',\n        'Août',\n        'Septembre',\n        'Octobre',\n        'Novembre',\n        'Décembre',\n    ],\n    tr: [\n        'Ocak',\n        'Şubat',\n        'Mart',\n        'Nisan',\n        'Mayıs',\n        'Haziran',\n        'Temmuz',\n        'Ağustos',\n        'Eylül',\n        'Ekim',\n        'Kasım',\n        'Aralık',\n    ],\n    zh: [\n        '一月',\n        '二月',\n        '三月',\n        '四月',\n        '五月',\n        '六月',\n        '七月',\n        '八月',\n        '九月',\n        '十月',\n        '十一月',\n        '十二月',\n    ],\n    de: [\n        'Januar',\n        'Februar',\n        'März',\n        'April',\n        'Mai',\n        'Juni',\n        'Juli',\n        'August',\n        'September',\n        'Oktober',\n        'November',\n        'Dezember',\n    ],\n    hu: [\n        'Január',\n        'Február',\n        'Március',\n        'Április',\n        'Május',\n        'Június',\n        'Július',\n        'Augusztus',\n        'Szeptember',\n        'Október',\n        'November',\n        'December',\n    ],\n};\n\nexport default {\n    parse(date, date_separator = '-', time_separator = /[.:]/) {\n        if (date instanceof Date) {\n            return date;\n        }\n        if (typeof date === 'string') {\n            let date_parts, time_parts;\n            const parts = date.split(' ');\n\n            date_parts = parts[0]\n                .split(date_separator)\n                .map((val) => parseInt(val, 10));\n            time_parts = parts[1] && parts[1].split(time_separator);\n\n            // month is 0 indexed\n            date_parts[1] = date_parts[1] - 1;\n\n            let vals = date_parts;\n\n            if (time_parts && time_parts.length) {\n                if (time_parts.length == 4) {\n                    time_parts[3] = '0.' + time_parts[3];\n                    time_parts[3] = parseFloat(time_parts[3]) * 1000;\n                }\n                vals = vals.concat(time_parts);\n            }\n\n            return new Date(...vals);\n        }\n    },\n\n    to_string(date, with_time = false) {\n        if (!(date instanceof Date)) {\n            throw new TypeError('Invalid argument type');\n        }\n        const vals = this.get_date_values(date).map((val, i) => {\n            if (i === 1) {\n                // add 1 for month\n                val = val + 1;\n            }\n\n            if (i === 6) {\n                return padStart(val + '', 3, '0');\n            }\n\n            return padStart(val + '', 2, '0');\n        });\n        const date_string = `${vals[0]}-${vals[1]}-${vals[2]}`;\n        const time_string = `${vals[3]}:${vals[4]}:${vals[5]}.${vals[6]}`;\n\n        return date_string + (with_time ? ' ' + time_string : '');\n    },\n\n    format(date, format_string = 'YYYY-MM-DD HH:mm:ss.SSS', lang = 'en') {\n        const values = this.get_date_values(date).map((d) => padStart(d, 2, 0));\n        const format_map = {\n            YYYY: values[0],\n            MM: padStart(+values[1] + 1, 2, 0),\n            DD: values[2],\n            HH: values[3],\n            mm: values[4],\n            ss: values[5],\n            SSS: values[6],\n            D: values[2],\n            MMMM: month_names[lang][+values[1]],\n            MMM: month_names[lang][+values[1]],\n        };\n\n        let str = format_string;\n        const formatted_values = [];\n\n        Object.keys(format_map)\n            .sort((a, b) => b.length - a.length) // big string first\n            .forEach((key) => {\n                if (str.includes(key)) {\n                    str = str.replace(key, `$${formatted_values.length}`);\n                    formatted_values.push(format_map[key]);\n                }\n            });\n\n        formatted_values.forEach((value, i) => {\n            str = str.replace(`$${i}`, value);\n        });\n\n        return str;\n    },\n\n    diff(date_a, date_b, scale = DAY) {\n        let milliseconds, seconds, hours, minutes, days, months, years;\n\n        milliseconds = date_a - date_b;\n        seconds = milliseconds / 1000;\n        minutes = seconds / 60;\n        hours = minutes / 60;\n        days = hours / 24;\n        months = days / 30;\n        years = months / 12;\n\n        if (!scale.endsWith('s')) {\n            scale += 's';\n        }\n\n        return Math.floor(\n            {\n                milliseconds,\n                seconds,\n                minutes,\n                hours,\n                days,\n                months,\n                years,\n            }[scale]\n        );\n    },\n\n    today() {\n        const vals = this.get_date_values(new Date()).slice(0, 3);\n        return new Date(...vals);\n    },\n\n    now() {\n        return new Date();\n    },\n\n    add(date, qty, scale) {\n        qty = parseInt(qty, 10);\n        const vals = [\n            date.getFullYear() + (scale === YEAR ? qty : 0),\n            date.getMonth() + (scale === MONTH ? qty : 0),\n            date.getDate() + (scale === DAY ? qty : 0),\n            date.getHours() + (scale === HOUR ? qty : 0),\n            date.getMinutes() + (scale === MINUTE ? qty : 0),\n            date.getSeconds() + (scale === SECOND ? qty : 0),\n            date.getMilliseconds() + (scale === MILLISECOND ? qty : 0),\n        ];\n        return new Date(...vals);\n    },\n\n    start_of(date, scale) {\n        const scores = {\n            [YEAR]: 6,\n            [MONTH]: 5,\n            [DAY]: 4,\n            [HOUR]: 3,\n            [MINUTE]: 2,\n            [SECOND]: 1,\n            [MILLISECOND]: 0,\n        };\n\n        function should_reset(_scale) {\n            const max_score = scores[scale];\n            return scores[_scale] <= max_score;\n        }\n\n        const vals = [\n            date.getFullYear(),\n            should_reset(YEAR) ? 0 : date.getMonth(),\n            should_reset(MONTH) ? 1 : date.getDate(),\n            should_reset(DAY) ? 0 : date.getHours(),\n            should_reset(HOUR) ? 0 : date.getMinutes(),\n            should_reset(MINUTE) ? 0 : date.getSeconds(),\n            should_reset(SECOND) ? 0 : date.getMilliseconds(),\n        ];\n\n        return new Date(...vals);\n    },\n\n    clone(date) {\n        return new Date(...this.get_date_values(date));\n    },\n\n    get_date_values(date) {\n        return [\n            date.getFullYear(),\n            date.getMonth(),\n            date.getDate(),\n            date.getHours(),\n            date.getMinutes(),\n            date.getSeconds(),\n            date.getMilliseconds(),\n        ];\n    },\n\n    get_days_in_month(date) {\n        const no_of_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n        const month = date.getMonth();\n\n        if (month !== 1) {\n            return no_of_days[month];\n        }\n\n        // Feb\n        const year = date.getFullYear();\n        if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {\n            return 29;\n        }\n        return 28;\n    },\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\nfunction padStart(str, targetLength, padString) {\n    str = str + '';\n    targetLength = targetLength >> 0;\n    padString = String(typeof padString !== 'undefined' ? padString : ' ');\n    if (str.length > targetLength) {\n        return String(str);\n    } else {\n        targetLength = targetLength - str.length;\n        if (targetLength > padString.length) {\n            padString += padString.repeat(targetLength / padString.length);\n        }\n        return padString.slice(0, targetLength) + String(str);\n    }\n}\n","export function $(expr, con) {\n    return typeof expr === 'string'\n        ? (con || document).querySelector(expr)\n        : expr || null;\n}\n\nexport function createSVG(tag, attrs) {\n    const elem = document.createElementNS('http://www.w3.org/2000/svg', tag);\n    for (let attr in attrs) {\n        if (attr === 'append_to') {\n            const parent = attrs.append_to;\n            parent.appendChild(elem);\n        } else if (attr === 'innerHTML') {\n            elem.innerHTML = attrs.innerHTML;\n        } else {\n            elem.setAttribute(attr, attrs[attr]);\n        }\n    }\n    return elem;\n}\n\nexport function animateSVG(svgElement, attr, from, to) {\n    const animatedSvgElement = getAnimationElement(svgElement, attr, from, to);\n\n    if (animatedSvgElement === svgElement) {\n        // triggered 2nd time programmatically\n        // trigger artificial click event\n        const event = document.createEvent('HTMLEvents');\n        event.initEvent('click', true, true);\n        event.eventName = 'click';\n        animatedSvgElement.dispatchEvent(event);\n    }\n}\n\nfunction getAnimationElement(\n    svgElement,\n    attr,\n    from,\n    to,\n    dur = '0.4s',\n    begin = '0.1s'\n) {\n    const animEl = svgElement.querySelector('animate');\n    if (animEl) {\n        $.attr(animEl, {\n            attributeName: attr,\n            from,\n            to,\n            dur,\n            begin: 'click + ' + begin, // artificial click\n        });\n        return svgElement;\n    }\n\n    const animateElement = createSVG('animate', {\n        attributeName: attr,\n        from,\n        to,\n        dur,\n        begin,\n        calcMode: 'spline',\n        values: from + ';' + to,\n        keyTimes: '0; 1',\n        keySplines: cubic_bezier('ease-out'),\n    });\n    svgElement.appendChild(animateElement);\n\n    return svgElement;\n}\n\nfunction cubic_bezier(name) {\n    return {\n        ease: '.25 .1 .25 1',\n        linear: '0 0 1 1',\n        'ease-in': '.42 0 1 1',\n        'ease-out': '0 0 .58 1',\n        'ease-in-out': '.42 0 .58 1',\n    }[name];\n}\n\n$.on = (element, event, selector, callback) => {\n    if (!callback) {\n        callback = selector;\n        $.bind(element, event, callback);\n    } else {\n        $.delegate(element, event, selector, callback);\n    }\n};\n\n$.off = (element, event, handler) => {\n    element.removeEventListener(event, handler);\n};\n\n$.bind = (element, event, callback) => {\n    event.split(/\\s+/).forEach(function (event) {\n        element.addEventListener(event, callback);\n    });\n};\n\n$.delegate = (element, event, selector, callback) => {\n    element.addEventListener(event, function (e) {\n        const delegatedTarget = e.target.closest(selector);\n        if (delegatedTarget) {\n            e.delegatedTarget = delegatedTarget;\n            callback.call(this, e, delegatedTarget);\n        }\n    });\n};\n\n$.closest = (selector, element) => {\n    if (!element) return null;\n\n    if (element.matches(selector)) {\n        return element;\n    }\n\n    return $.closest(selector, element.parentNode);\n};\n\n$.attr = (element, attr, value) => {\n    if (!value && typeof attr === 'string') {\n        return element.getAttribute(attr);\n    }\n\n    if (typeof attr === 'object') {\n        for (let key in attr) {\n            $.attr(element, key, attr[key]);\n        }\n        return;\n    }\n\n    element.setAttribute(attr, value);\n};\n","import date_utils from './date_utils';\nimport { $, createSVG, animateSVG } from './svg_utils';\n\nexport default class Bar {\n    constructor(gantt, task) {\n        this.set_defaults(gantt, task);\n        this.prepare();\n        this.draw();\n        this.bind();\n    }\n\n    pickColorBasedOnBG(bgColor) {\n        if (bgColor) {\n            const hex = bgColor.toString(16);\n            const color = bgColor.charAt(0) === '#' ? hex.substring(1, 7) : hex;\n            const r = parseInt(color.substring(0, 2), 16);\n            const g = parseInt(color.substring(2, 4), 16);\n            const b = parseInt(color.substring(4, 6), 16);\n            return r * 0.299 + g * 0.587 + b * 0.114 > 170 ? '#333' : '#f5f5f5';\n        } else {\n            return '#f5f5f5';\n        }\n    }\n\n    pickStripeColorBasedOnBG(bgColor) {\n        if (bgColor) {\n            const hex = bgColor.toString(16);\n            const color = bgColor.charAt(0) === '#' ? hex.substring(1, 7) : hex;\n            const r = parseInt(color.substring(0, 2), 16);\n            const g = parseInt(color.substring(2, 4), 16);\n            const b = parseInt(color.substring(4, 6), 16);\n            return r * 0.299 + g * 0.587 + b * 0.114 > 250\n                ? 'lightgrey'\n                : 'white';\n        } else {\n            return 'white';\n        }\n    }\n\n    set_defaults(gantt, task) {\n        this.action_completed = false;\n        this.gantt = gantt;\n        this.task = task;\n    }\n\n    prepare() {\n        this.prepare_values();\n        this.prepare_helpers();\n    }\n\n    prepare_values() {\n        this.invalid = this.task.invalid;\n        this.height = this.gantt.options.bar_height;\n        this.x = this.compute_x();\n        this.y = this.compute_y();\n        this.corner_radius = this.gantt.options.bar_corner_radius;\n        this.duration =\n            date_utils.diff(this.task._end, this.task._start, 'hour') /\n            this.gantt.options.step;\n        this.width = this.gantt.options.column_width * this.duration;\n        this.progress_width =\n            this.gantt.options.column_width *\n                this.duration *\n                (this.task.progress / 100) || 0;\n        this.group = createSVG('g', {\n            class: 'bar-wrapper ' + (this.task.custom_class || ''),\n            'data-id': this.task.id,\n        });\n        this.bar_group = createSVG('g', {\n            class: 'bar-group',\n            append_to: this.group,\n        });\n        this.handle_group = createSVG('g', {\n            class: 'handle-group',\n            append_to: this.group,\n        });\n    }\n\n    prepare_helpers() {\n        SVGElement.prototype.getX = function () {\n            return +this.getAttribute('x');\n        };\n        SVGElement.prototype.getY = function () {\n            return +this.getAttribute('y');\n        };\n        SVGElement.prototype.getWidth = function () {\n            return +this.getAttribute('width');\n        };\n        SVGElement.prototype.getHeight = function () {\n            return +this.getAttribute('height');\n        };\n        SVGElement.prototype.getEndX = function () {\n            return this.getX() + this.getWidth();\n        };\n    }\n\n    draw() {\n        this.draw_bar();\n        this.draw_bar_pattern();\n        this.draw_progress_bar();\n        this.draw_label();\n        this.draw_carets();\n        this.draw_resize_handles();\n    }\n\n    draw_bar_pattern() {\n        this.$bar_pattern = createSVG('rect', {\n            x: this.x,\n            y: this.y,\n            width: this.width,\n            height: this.height,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'bar-pattern',\n            append_to: this.bar_group,\n            style: 'fill: ' + this.pickStripeColorBasedOnBG(this.task.color),\n        });\n\n        animateSVG(this.$bar_pattern, 'width', 0, this.width);\n\n        if (this.invalid) {\n            this.$bar_pattern.classList.add('bar-invalid');\n        }\n    }\n\n    draw_bar() {\n        this.$bar = createSVG('rect', {\n            x: this.x,\n            y: this.y,\n            width: this.width,\n            height: this.height,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'bar',\n            append_to: this.bar_group,\n            style:\n                'fill: ' +\n                this.task.color +\n                '; stroke-width:1; stroke:lightgrey; ',\n        });\n\n        animateSVG(this.$bar, 'width', 0, this.width);\n\n        if (this.invalid) {\n            this.$bar.classList.add('bar-invalid');\n        }\n    }\n\n    draw_progress_bar() {\n        if (this.invalid) return;\n        this.$bar_progress = createSVG('rect', {\n            x: this.x,\n            y: this.y,\n            width: this.progress_width,\n            height: this.height,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'bar-progress',\n            append_to: this.bar_group,\n            style: 'fill: ' + this.task.color,\n        });\n\n        animateSVG(this.$bar_progress, 'width', 0, this.progress_width);\n    }\n\n    draw_label() {\n        createSVG('text', {\n            x: this.x + this.width / 2,\n            y: this.y + this.height / 2,\n            innerHTML: this.task.name,\n            class: 'bar-label',\n            append_to: this.bar_group,\n            style: 'fill: ' + this.pickColorBasedOnBG(this.task.color),\n        });\n        // labels get BBox in the next tick\n        requestAnimationFrame(() => this.update_label_position());\n    }\n\n    draw_resize_handles() {\n        if (this.invalid) return;\n\n        const bar = this.$bar;\n        const handle_width = 8;\n\n        createSVG('rect', {\n            x: bar.getX() + bar.getWidth() - 9,\n            y: bar.getY() + 1,\n            width: handle_width,\n            height: this.height - 2,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'handle right',\n            append_to: this.handle_group,\n        });\n\n        createSVG('rect', {\n            x: bar.getX() + 1,\n            y: bar.getY() + 1,\n            width: handle_width,\n            height: this.height - 2,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'handle left',\n            append_to: this.handle_group,\n        });\n\n        if (this.task.progress && this.task.progress < 100) {\n            this.$handle_progress = createSVG('polygon', {\n                points: this.get_progress_polygon_points().join(','),\n                class: 'handle progress',\n                append_to: this.handle_group,\n            });\n        }\n    }\n\n    draw_carets() {\n        const bar = this.$bar;\n        setTimeout(() => {\n            const label = this.group.querySelector('.bar-label');\n\n            if (this.gantt.get_all_dependent_tasks(this.task.id).length != 0) {\n                this.bar_group.classList.add('collapsable');\n                if (bar.getWidth() - label.getBBox().width > 40) {\n                    const caretWidth = 12;\n                    const caretHeight = 6;\n                    const caretX = bar.getX() + bar.getWidth() - 20;\n                    const caretY = bar.getY() + this.height / 2;\n\n                    const caretPoints = [\n                        `${caretX - caretWidth / 2},${\n                            caretY - caretHeight / 2\n                        }`,\n                        `${caretX},${caretY + caretHeight / 2}`,\n                        `${caretX + caretWidth / 2},${\n                            caretY - caretHeight / 2\n                        }`,\n                    ];\n\n                    createSVG('polygon', {\n                        points: caretPoints.join(' '),\n                        class: 'caret',\n                        append_to: this.handle_group,\n                        style:\n                            'fill: ' +\n                            this.pickColorBasedOnBG(this.task.color) +\n                            '; stroke:transparent; stroke-width:0.1rem; ',\n                    });\n                }\n            }\n        }, 1);\n    }\n\n    get_progress_polygon_points() {\n        const bar_progress = this.$bar_progress;\n        return [\n            bar_progress.getEndX() - 5,\n            bar_progress.getY() + bar_progress.getHeight(),\n            bar_progress.getEndX() + 5,\n            bar_progress.getY() + bar_progress.getHeight(),\n            bar_progress.getEndX(),\n            bar_progress.getY() + bar_progress.getHeight() - 8.66,\n        ];\n    }\n\n    bind() {\n        if (this.invalid) return;\n        this.setup_click_event();\n    }\n\n    setup_click_event() {\n        $.on(this.group, 'focus ' + this.gantt.options.popup_trigger, (e) => {\n            if (this.action_completed) {\n                // just finished a move action, wait for a few seconds\n                return;\n            }\n\n            //this.show_popup();\n            this.gantt.unselect_all();\n            this.group.classList.add('active');\n        });\n\n        $.on(this.group, 'dblclick', (e) => {\n            if (this.action_completed) {\n                // just finished a move action, wait for a few seconds\n                return;\n            }\n\n            this.gantt.trigger_event('click', [this.task]);\n        });\n    }\n\n    show_popup() {\n        if (this.gantt.bar_being_dragged) return;\n\n        const start_date = date_utils.format(\n            this.task._start,\n            'MMM D',\n            this.gantt.options.language\n        );\n        const end_date = date_utils.format(\n            date_utils.add(this.task._end, -1, 'second'),\n            'MMM D',\n            this.gantt.options.language\n        );\n        const subtitle = start_date + ' - ' + end_date;\n\n        this.gantt.show_popup({\n            target_element: this.$bar,\n            title: this.task.name,\n            subtitle: subtitle,\n            task: this.task,\n        });\n    }\n\n    update_bar_position({ x = null, width = null, y = null }) {\n        const bar = this.$bar;\n        const bar_pattern = this.$bar_pattern;\n\n        if (x) {\n            this.update_attr(bar, 'x', x);\n            this.update_attr(bar_pattern, 'x', x);\n        }\n        if (width && width >= this.gantt.options.column_width) {\n            this.update_attr(bar, 'width', width);\n            this.update_attr(bar_pattern, 'width', width);\n        }\n        if (y) {\n            this.update_attr(bar, 'y', y);\n            this.update_attr(bar_pattern, 'y', y);\n        }\n        this.update_label_position();\n        this.update_handle_position();\n        this.update_progressbar_position();\n        this.update_underlying_bar_position();\n        this.update_arrow_position();\n    }\n\n    date_changed() {\n        let changed = false;\n        const { new_start_date, new_end_date } = this.compute_start_end_date();\n\n        if (Number(this.task._start) !== Number(new_start_date)) {\n            changed = true;\n            this.task._start = new_start_date;\n        }\n\n        if (Number(this.task._end) !== Number(new_end_date)) {\n            changed = true;\n            this.task._end = new_end_date;\n        }\n\n        if (!changed) return;\n\n        this.gantt.trigger_event('date_change', [\n            this.task,\n            new_start_date,\n            date_utils.add(new_end_date, -1, 'second'),\n        ]);\n    }\n\n    progress_changed() {\n        const new_progress = this.compute_progress();\n        this.task.progress = new_progress;\n        this.gantt.trigger_event('progress_change', [this.task, new_progress]);\n    }\n\n    set_action_completed() {\n        this.action_completed = true;\n        setTimeout(() => (this.action_completed = false), 1000);\n    }\n\n    compute_start_end_date() {\n        const bar = this.$bar;\n        const x_in_units = bar.getX() / this.gantt.options.column_width;\n        const new_start_date = date_utils.add(\n            this.gantt.gantt_start,\n            x_in_units * this.gantt.options.step,\n            'hour'\n        );\n        const width_in_units = bar.getWidth() / this.gantt.options.column_width;\n        const new_end_date = date_utils.add(\n            new_start_date,\n            width_in_units * this.gantt.options.step,\n            'hour'\n        );\n\n        return { new_start_date, new_end_date };\n    }\n\n    compute_progress() {\n        const progress =\n            (this.$bar_progress.getWidth() / this.$bar.getWidth()) * 100;\n        return parseInt(progress, 10);\n    }\n\n    compute_x() {\n        const { step, column_width } = this.gantt.options;\n        const task_start = this.task._start;\n        const gantt_start = this.gantt.gantt_start;\n\n        const diff = date_utils.diff(task_start, gantt_start, 'hour');\n        let x = (diff / step) * column_width;\n\n        if (this.gantt.view_is('Month')) {\n            const diff = date_utils.diff(task_start, gantt_start, 'day');\n            x = (diff * column_width) / 30;\n        }\n        return x;\n    }\n\n    compute_y() {\n        return (\n            this.gantt.options.header_height +\n            this.gantt.options.padding +\n            this.task._index * (this.height + this.gantt.options.padding)\n        );\n    }\n\n    get_snap_position(dx) {\n        let odx = dx,\n            rem,\n            position;\n\n        if (this.gantt.view_is('Week')) {\n            rem = dx % (this.gantt.options.column_width / 7);\n            position =\n                odx -\n                rem +\n                (rem < this.gantt.options.column_width / 14\n                    ? 0\n                    : this.gantt.options.column_width / 7);\n        } else if (this.gantt.view_is('Month')) {\n            rem = dx % (this.gantt.options.column_width / 30);\n            position =\n                odx -\n                rem +\n                (rem < this.gantt.options.column_width / 60\n                    ? 0\n                    : this.gantt.options.column_width / 30);\n        } else {\n            rem = dx % this.gantt.options.column_width;\n            position =\n                odx -\n                rem +\n                (rem < this.gantt.options.column_width / 2\n                    ? 0\n                    : this.gantt.options.column_width);\n        }\n        return position;\n    }\n\n    update_attr(element, attr, value) {\n        value = +value;\n        if (!isNaN(value)) {\n            element.setAttribute(attr, value);\n        }\n        return element;\n    }\n\n    update_progressbar_position() {\n        if (this.invalid || !this.task.progress) return;\n\n        this.$bar_progress.setAttribute('x', this.$bar.getX());\n        this.$bar_progress.setAttribute('y', this.$bar.getY());\n        this.$bar_progress.setAttribute(\n            'width',\n            this.$bar.getWidth() * (this.task.progress / 100)\n        );\n    }\n\n    update_underlying_bar_position() {\n        if (this.invalid) return;\n        const underBar = this.group.querySelector('.bar');\n\n        underBar.setAttribute('x', this.$bar.getX());\n        underBar.setAttribute('y', this.$bar.getY());\n        underBar.setAttribute('width', this.$bar.getWidth());\n    }\n\n    update_label_position() {\n        const bar = this.$bar,\n            label = this.group.querySelector('.bar-label');\n\n        if (label.getBBox().width > bar.getWidth()) {\n            label.classList.add('big');\n            label.setAttribute('x', bar.getX() + bar.getWidth() + 5);\n        } else {\n            label.classList.remove('big');\n            label.setAttribute('x', bar.getX() + bar.getWidth() / 2);\n        }\n        label.setAttribute('y', bar.getY() + bar.getHeight() / 2);\n    }\n\n    update_handle_position() {\n        if (this.invalid) return;\n        const bar = this.$bar;\n        this.handle_group\n            .querySelector('.handle.left')\n            .setAttribute('x', bar.getX() + 1);\n        this.handle_group\n            .querySelector('.handle.left')\n            .setAttribute('y', bar.getY() + 1);\n        this.handle_group\n            .querySelector('.handle.right')\n            .setAttribute('x', bar.getEndX() - 9);\n        this.handle_group\n            .querySelector('.handle.right')\n            .setAttribute('y', bar.getY() + 1);\n        if (this.handle_group.querySelector('.caret')) {\n            const caretElement = this.handle_group.querySelector('.caret');\n\n            const caretWidth = 12;\n            const caretHeight = 6;\n            const caretX = bar.getX() + bar.getWidth() - 20;\n            const caretY = bar.getY() + this.height / 2;\n\n            const caretPoints = [\n                `${caretX - caretWidth / 2},${caretY - caretHeight / 2}`,\n                `${caretX},${caretY + caretHeight / 2}`,\n                `${caretX + caretWidth / 2},${caretY - caretHeight / 2}`,\n            ];\n\n            caretElement.setAttribute('points', caretPoints.join(' '));\n        }\n        const handle = this.group.querySelector('.handle.progress');\n        handle &&\n            handle.setAttribute('points', this.get_progress_polygon_points());\n    }\n\n    update_arrow_position() {\n        this.arrows = this.arrows || [];\n        for (let arrow of this.arrows) {\n            arrow.update();\n        }\n    }\n}\n\nfunction isFunction(functionToCheck) {\n    var getType = {};\n    return (\n        functionToCheck &&\n        getType.toString.call(functionToCheck) === '[object Function]'\n    );\n}\n","import { createSVG } from './svg_utils';\n\nexport default class Arrow {\n    constructor(gantt, from_task, to_task) {\n        this.gantt = gantt;\n        this.from_task = from_task;\n        this.to_task = to_task;\n\n        this.calculate_path();\n        this.draw();\n    }\n\n    calculate_path() {\n        let start_x =\n            this.from_task.$bar.getX() + this.from_task.$bar.getWidth() / 2;\n\n        const condition = () =>\n            this.to_task.$bar.getX() < start_x + this.gantt.options.padding &&\n            start_x > this.from_task.$bar.getX() + this.gantt.options.padding;\n\n        while (condition()) {\n            start_x -= 10;\n        }\n\n        const start_y =\n            this.from_task.$bar.getY() + this.gantt.options.bar_height;\n\n        const end_x = this.to_task.$bar.getX() - this.gantt.options.padding / 2;\n        const end_y =\n            this.to_task.$bar.getY() + this.gantt.options.bar_height / 2;\n\n        const from_is_below_to =\n            this.from_task.$bar.getY() > this.to_task.$bar.getY();\n        const curve = this.gantt.options.arrow_curve;\n        const clockwise = from_is_below_to ? 1 : 0;\n        const curve_y = from_is_below_to ? -curve : curve;\n        const offset = from_is_below_to\n            ? end_y + this.gantt.options.arrow_curve\n            : end_y - this.gantt.options.arrow_curve;\n\n        this.path = `\n            M ${start_x} ${start_y}\n            V ${offset}\n            a ${curve} ${curve} 0 0 ${clockwise} ${curve} ${curve_y}\n            L ${end_x} ${end_y}\n            m -5 -5\n            l 5 5\n            l -5 5`;\n\n        if (\n            this.to_task.$bar.getX() <\n            this.from_task.$bar.getX() + this.gantt.options.padding\n        ) {\n            const down_1 = this.gantt.options.padding / 2 - curve;\n            const down_2 =\n                this.to_task.$bar.getY() +\n                this.to_task.$bar.getHeight() / 2 -\n                curve_y;\n            const left = this.to_task.$bar.getX() - this.gantt.options.padding;\n\n            this.path = `\n                M ${start_x} ${start_y}\n                v ${down_1}\n                a ${curve} ${curve} 0 0 1 -${curve} ${curve}\n                H ${left}\n                a ${curve} ${curve} 0 0 ${clockwise} -${curve} ${curve_y}\n                V ${down_2}\n                a ${curve} ${curve} 0 0 ${clockwise} ${curve} ${curve_y}\n                L ${end_x} ${end_y}\n                m -5 -5\n                l 5 5\n                l -5 5`;\n        }\n    }\n\n    draw() {\n        this.element = createSVG('path', {\n            d: this.path,\n            'data-from': this.from_task.task.id,\n            'data-to': this.to_task.task.id,\n        });\n    }\n\n    update() {\n        this.calculate_path();\n        this.element.setAttribute('d', this.path);\n    }\n}\n","export default class Popup {\n    constructor(parent, custom_html) {\n        this.parent = parent;\n        this.custom_html = custom_html;\n        this.make();\n    }\n\n    make() {\n        this.parent.innerHTML = `\n            <div class=\"title\"></div>\n            <div class=\"subtitle\"></div>\n            <div class=\"pointer\"></div>\n        `;\n\n        this.hide();\n\n        this.title = this.parent.querySelector('.title');\n        this.subtitle = this.parent.querySelector('.subtitle');\n        this.pointer = this.parent.querySelector('.pointer');\n    }\n\n    show(options) {\n        if (!options.target_element) {\n            throw new Error('target_element is required to show popup');\n        }\n        if (!options.position) {\n            options.position = 'left';\n        }\n        const target_element = options.target_element;\n\n        if (this.custom_html) {\n            let html = this.custom_html(options.task);\n            html += '<div class=\"pointer\"></div>';\n            this.parent.innerHTML = html;\n            this.pointer = this.parent.querySelector('.pointer');\n        } else {\n            // set data\n            this.title.innerHTML = options.title;\n            this.subtitle.innerHTML = options.subtitle;\n            this.parent.style.width = this.parent.clientWidth + 'px';\n        }\n\n        // set position\n        let position_meta;\n        if (target_element instanceof HTMLElement) {\n            position_meta = target_element.getBoundingClientRect();\n        } else if (target_element instanceof SVGElement) {\n            position_meta = options.target_element.getBBox();\n        }\n\n        if (options.position === 'left') {\n            this.parent.style.left =\n                position_meta.x + (position_meta.width + 10) + 'px';\n            this.parent.style.top = position_meta.y + 'px';\n\n            this.pointer.style.transform = 'rotateZ(90deg)';\n            this.pointer.style.left = '-7px';\n            this.pointer.style.top = '2px';\n        }\n\n        // show\n        this.parent.style.opacity = 1;\n    }\n\n    hide() {\n        this.parent.style.opacity = 0;\n        this.parent.style.left = 0;\n    }\n}\n","import date_utils from './date_utils';\nimport { $, createSVG } from './svg_utils';\nimport Bar from './bar';\nimport Arrow from './arrow';\nimport Popup from './popup';\nimport './gantt.scss';\n\nconst VIEW_MODE = {\n    QUARTER_DAY: 'Quarter Day',\n    HALF_DAY: 'Half Day',\n    DAY: 'Day',\n    WEEK: 'Week',\n    MONTH: 'Month',\n    YEAR: 'Year',\n};\n\nexport default class Gantt {\n    constructor(wrapper, tasks, options) {\n        this.tasks = tasks;\n        this.current_location = false;\n        this.setup_wrapper(wrapper);\n        this.setup_options(options);\n        this.setup_tasks(tasks);\n        // initialize with default view mode\n        this.change_view_mode();\n        this.bind_events();\n    }\n\n    debounce(func, wait) {\n        let timeout;\n        return function () {\n            const context = this;\n            const args = arguments;\n            clearTimeout(timeout);\n            timeout = setTimeout(function () {\n                func.apply(context, args);\n            }, wait);\n        };\n    }\n\n    setup_wrapper(element) {\n        let svg_element, wrapper_element;\n\n        // CSS Selector is passed\n        if (typeof element === 'string') {\n            element = document.querySelector(element);\n        }\n\n        // get the SVGElement\n        if (element instanceof HTMLElement) {\n            wrapper_element = element;\n            svg_element = element.querySelector('svg');\n        } else if (element instanceof SVGElement) {\n            svg_element = element;\n        } else {\n            throw new TypeError(\n                'Frappé Gantt only supports usage of a string CSS selector,' +\n                    \" HTML DOM element or SVG DOM element for the 'element' parameter\"\n            );\n        }\n\n        // svg element\n        if (!svg_element) {\n            // create it\n            this.$svg = createSVG('svg', {\n                append_to: wrapper_element,\n                class: 'gantt',\n            });\n        } else {\n            this.$svg = svg_element;\n            this.$svg.classList.add('gantt');\n        }\n\n        // wrapper element\n        this.$container = document.createElement('div');\n        this.$container.classList.add('gantt-container');\n\n        const parent_element = this.$svg.parentElement;\n        parent_element.appendChild(this.$container);\n        this.$container.appendChild(this.$svg);\n\n        // popup wrapper\n        this.popup_wrapper = document.createElement('div');\n        this.popup_wrapper.classList.add('popup-wrapper');\n        this.$container.appendChild(this.popup_wrapper);\n    }\n\n    setup_options(options) {\n        const default_options = {\n            header_height: 50,\n            column_width: 30,\n            step: 24,\n            view_modes: [...Object.values(VIEW_MODE)],\n            bar_height: 20,\n            bar_corner_radius: 3,\n            arrow_curve: 5,\n            padding: 18,\n            view_mode: 'Day',\n            date_format: 'YYYY-MM-DD',\n            popup_trigger: 'click',\n            custom_popup_html: null,\n            language: 'en',\n            sortable: 'false',\n        };\n        this.options = Object.assign({}, default_options, options);\n    }\n\n    setup_tasks(tasks) {\n        this.visible_tasks = tasks.filter(\n            (task) => task.visible || task.visible === undefined\n        );\n\n        this.visible_tasks.map((task, i) => {\n            task._start = date_utils.parse(task.start);\n            task._end = date_utils.parse(task.end);\n\n            if (date_utils.diff(task._end, task._start, 'year') > 10) {\n                task.end = null;\n            }\n\n            // cache index\n            task._index = i;\n\n            // invalid dates\n            if (!task.start && !task.end) {\n                const today = date_utils.today();\n                task._start = today;\n                task._end = date_utils.add(today, 2, 'day');\n            }\n\n            if (!task.start && task.end) {\n                task._start = date_utils.add(task._end, -2, 'day');\n            }\n\n            if (task.start && !task.end) {\n                task._end = date_utils.add(task._start, 2, 'day');\n            }\n\n            // if hours is not set, assume the last day is full day\n            // e.g: 2018-09-09 becomes 2018-09-09 23:59:59\n            const task_end_values = date_utils.get_date_values(task._end);\n            if (task_end_values.slice(3).every((d) => d === 0)) {\n                task._end = date_utils.add(task._end, 24, 'hour');\n            }\n\n            // invalid flag\n            if (!task.start || !task.end) {\n                task.invalid = true;\n            }\n\n            // dependencies\n            if (typeof task.dependencies === 'string' || !task.dependencies) {\n                let deps = [];\n                if (task.dependencies) {\n                    deps = task.dependencies\n                        .split(',')\n                        .map((d) => d.trim())\n                        .filter((d) => d);\n                }\n                task.dependencies = deps;\n            }\n\n            // uids\n            if (!task.id) {\n                task.id = generate_id(task);\n            }\n\n            return task;\n        });\n\n        this.setup_dependencies();\n        this.setup_ancestors();\n    }\n\n    updateTaskVisibility(task, visibility) {\n        task.visible = visibility;\n\n        // Also update visibility in the original tasks array\n        const originalTask = this.originalTasks.find((t) => t.id === task.id);\n        if (originalTask) {\n            originalTask.visible = visibility;\n        }\n    }\n\n    setup_dependencies() {\n        this.dependency_map = {};\n        for (let t of this.tasks) {\n            for (let d of t.dependencies) {\n                this.dependency_map[d] = this.dependency_map[d] || [];\n                this.dependency_map[d].push(t.id);\n            }\n        }\n    }\n\n    //make a map of tasks to their reverse dependencies with ancestors\n    setup_ancestors() {\n        this.ancestor_map = {};\n        for (let t of this.tasks) {\n            for (let d of t.dependencies) {\n                this.ancestor_map[t.id] = this.ancestor_map[t.id] || [];\n                this.ancestor_map[t.id].push(d);\n                if (this.ancestor_map[d]) {\n                    this.ancestor_map[t.id] = this.ancestor_map[t.id].concat(\n                        this.ancestor_map[d]\n                    );\n                }\n            }\n        }\n    }\n\n    refresh(tasks) {\n        this.setup_tasks(tasks);\n        this.change_view_mode();\n    }\n\n    change_view_mode(mode = this.options.view_mode) {\n        this.update_view_scale(mode);\n        this.setup_dates();\n        this.render();\n        // fire viewmode_change event\n        this.trigger_event('view_change', [mode]);\n    }\n\n    update_view_scale(view_mode) {\n        this.options.view_mode = view_mode;\n\n        if (view_mode === VIEW_MODE.DAY) {\n            this.options.step = 24;\n            this.options.column_width = 38;\n        } else if (view_mode === VIEW_MODE.HALF_DAY) {\n            this.options.step = 24 / 2;\n            this.options.column_width = 38;\n        } else if (view_mode === VIEW_MODE.QUARTER_DAY) {\n            this.options.step = 24 / 4;\n            this.options.column_width = 38;\n        } else if (view_mode === VIEW_MODE.WEEK) {\n            this.options.step = 24 * 7;\n            this.options.column_width = 140;\n        } else if (view_mode === VIEW_MODE.MONTH) {\n            this.options.step = 24 * 30;\n            this.options.column_width = 120;\n        } else if (view_mode === VIEW_MODE.YEAR) {\n            this.options.step = 24 * 365;\n            this.options.column_width = 120;\n        }\n    }\n\n    scale_view_mode(zoomValue) {\n        const view_modes = this.options.view_modes;\n\n        if (zoomValue > 0) {\n            this.change_view_mode(\n                view_modes[view_modes.indexOf(this.options.view_mode) - 1]\n            );\n        } else if (zoomValue < 0 && this.options.column_width > 15) {\n            this.change_view_mode(\n                view_modes[view_modes.indexOf(this.options.view_mode) + 1]\n            );\n        }\n    }\n\n    setup_dates() {\n        this.setup_gantt_dates();\n        this.setup_date_values();\n    }\n\n    setup_gantt_dates() {\n        this.gantt_start = this.gantt_end = null;\n\n        for (let task of this.tasks) {\n            // set global start and end date\n            if (!this.gantt_start || task._start < this.gantt_start) {\n                this.gantt_start = task._start;\n            }\n            if (!this.gantt_end || task._end > this.gantt_end) {\n                this.gantt_end = task._end;\n            }\n        }\n\n        this.gantt_start = date_utils.start_of(this.gantt_start, 'day');\n        this.gantt_end = date_utils.start_of(this.gantt_end, 'day');\n\n        // add date padding on both sides\n        if (this.view_is(VIEW_MODE.YEAR)) {\n            const gantt_start = new Date(\n                date_utils.format(\n                    date_utils.add(this.gantt_start, -6, 'year'),\n                    'YYYY'\n                )\n            );\n            this.gantt_start = gantt_start;\n            this.gantt_end = date_utils.add(this.gantt_end, 6, 'year');\n        } else if (this.view_is(VIEW_MODE.MONTH)) {\n            this.gantt_start = date_utils.add(this.gantt_start, -8, 'month');\n            this.gantt_end = date_utils.add(this.gantt_end, 8, 'month');\n        } else {\n            this.gantt_start = date_utils.add(this.gantt_start, -2, 'month');\n            this.gantt_end = date_utils.add(this.gantt_end, 2, 'month');\n        }\n    }\n\n    setup_date_values() {\n        this.dates = [];\n        let cur_date = null;\n\n        while (cur_date === null || cur_date < this.gantt_end) {\n            if (!cur_date) {\n                cur_date = date_utils.clone(this.gantt_start);\n            } else {\n                if (this.view_is(VIEW_MODE.YEAR)) {\n                    cur_date = date_utils.add(cur_date, 1, 'year');\n                } else if (this.view_is(VIEW_MODE.MONTH)) {\n                    cur_date = date_utils.add(cur_date, 1, 'month');\n                } else {\n                    cur_date = date_utils.add(\n                        cur_date,\n                        this.options.step,\n                        'hour'\n                    );\n                }\n            }\n            this.dates.push(cur_date);\n        }\n    }\n\n    bind_events() {\n        this.bind_grid_click();\n        this.bind_bar_events();\n        this.bind_scroll();\n    }\n\n    render() {\n        this.clear();\n\n        this.setup_layers();\n        this.make_grid();\n        this.make_dates();\n        this.make_bars();\n        this.make_arrows();\n        this.map_arrows_on_bars();\n        this.set_width();\n        this.set_scroll_position();\n    }\n\n    setup_layers() {\n        this.layers = {};\n        const layers = ['grid', 'arrow', 'progress', 'bar', 'details', 'date'];\n        // make group layers\n        for (let layer of layers) {\n            this.layers[layer] = createSVG('g', {\n                class: layer,\n                append_to: this.$svg,\n            });\n        }\n    }\n\n    make_grid() {\n        this.make_grid_background();\n        this.make_grid_rows();\n        this.make_grid_header();\n        this.make_grid_ticks();\n        this.make_grid_highlights();\n    }\n\n    make_grid_background() {\n        const grid_width = this.dates.length * this.options.column_width;\n        const grid_height =\n            this.options.header_height +\n            this.options.padding +\n            (this.options.bar_height + this.options.padding) *\n                this.tasks.length;\n\n        createSVG('rect', {\n            x: 0,\n            y: 0,\n            width: grid_width,\n            height: grid_height,\n            class: 'grid-background',\n            append_to: this.layers.grid,\n        });\n\n        $.attr(this.$svg, {\n            height: grid_height + this.options.padding + 100,\n            width: '100%',\n        });\n    }\n\n    make_grid_rows() {\n        const rows_layer = createSVG('g', { append_to: this.layers.grid });\n        const lines_layer = createSVG('g', { append_to: this.layers.grid });\n\n        const row_width = this.dates.length * this.options.column_width;\n        const row_height = this.options.bar_height + this.options.padding;\n\n        let row_y = this.options.header_height + this.options.padding / 2;\n\n        for (let task of this.tasks) {\n            createSVG('rect', {\n                x: 0,\n                y: row_y,\n                width: row_width,\n                height: row_height,\n                data_row: task.id,\n                class: 'grid-row',\n                append_to: rows_layer,\n            });\n\n            createSVG('line', {\n                x1: 0,\n                y1: row_y + row_height,\n                x2: row_width,\n                y2: row_y + row_height,\n                class: 'row-line',\n                append_to: lines_layer,\n            });\n\n            row_y += this.options.bar_height + this.options.padding;\n        }\n    }\n\n    make_grid_header() {\n        const header_width = this.dates.length * this.options.column_width;\n        const header_height = this.options.header_height + 10;\n        createSVG('rect', {\n            x: 0,\n            y: 0,\n            width: header_width,\n            height: header_height,\n            class: 'grid-header',\n            append_to: this.layers.date,\n        });\n    }\n\n    make_grid_ticks() {\n        let tick_x = 0;\n        let tick_y = this.options.header_height + this.options.padding / 2;\n        let tick_height =\n            (this.options.bar_height + this.options.padding) *\n            this.tasks.length;\n\n        for (let date of this.dates) {\n            let tick_class = 'tick';\n            // thick tick for monday\n            if (this.view_is(VIEW_MODE.DAY) && date.getDate() === 1) {\n                tick_class += ' thick';\n            }\n            // thick tick for first week\n            if (\n                this.view_is(VIEW_MODE.WEEK) &&\n                date.getDate() >= 1 &&\n                date.getDate() < 8\n            ) {\n                tick_class += ' thick';\n            }\n            // thick ticks for quarters\n            if (this.view_is(VIEW_MODE.MONTH) && date.getMonth() % 3 === 0) {\n                tick_class += ' thick';\n            }\n\n            createSVG('path', {\n                d: `M ${tick_x} ${tick_y} v ${tick_height}`,\n                class: tick_class,\n                append_to: this.layers.grid,\n            });\n\n            if (this.view_is(VIEW_MODE.MONTH)) {\n                tick_x +=\n                    (date_utils.get_days_in_month(date) *\n                        this.options.column_width) /\n                    30;\n            } else {\n                tick_x += this.options.column_width;\n            }\n        }\n    }\n\n    make_grid_highlights() {\n        // highlight today's date\n        if (this.view_is(VIEW_MODE.DAY)) {\n            const x =\n                (date_utils.diff(date_utils.today(), this.gantt_start, 'hour') /\n                    this.options.step) *\n                this.options.column_width;\n            const y = 0;\n\n            const width = this.options.column_width;\n            const height =\n                (this.options.bar_height + this.options.padding) *\n                    this.tasks.length +\n                this.options.header_height +\n                this.options.padding / 2;\n\n            createSVG('rect', {\n                x,\n                y,\n                width,\n                height,\n                class: 'today-highlight',\n                append_to: this.layers.grid,\n            });\n        }\n    }\n\n    make_dates() {\n        for (let date of this.get_dates_to_draw()) {\n            createSVG('text', {\n                x: date.lower_x,\n                y: date.lower_y,\n                innerHTML: date.lower_text,\n                class: 'lower-text',\n                append_to: this.layers.date,\n            });\n\n            if (date.upper_text) {\n                const $upper_text = createSVG('text', {\n                    x: date.upper_x,\n                    y: date.upper_y,\n                    innerHTML: date.upper_text,\n                    class: 'upper-text',\n                    append_to: this.layers.date,\n                });\n\n                // remove out-of-bound dates\n                if (\n                    $upper_text.getBBox().x2 > this.layers.grid.getBBox().width\n                ) {\n                    $upper_text.remove();\n                }\n            }\n        }\n    }\n\n    get_dates_to_draw() {\n        const monthPerYears = {};\n\n        if (this.options.view_mode === 'Month') {\n            this.dates.forEach((date) => {\n                if (monthPerYears[date.getFullYear()]) {\n                    monthPerYears[date.getFullYear()] += 1;\n                } else {\n                    monthPerYears[date.getFullYear()] = 1;\n                }\n            });\n        }\n        const dates = this.dates.map((date, i) => {\n            const last_date = i >= 1 ? this.dates[i - 1] : null;\n            return this.get_date_info(date, last_date, i, monthPerYears);\n        });\n        return dates;\n    }\n\n    get_date_info(date, last_date, i, monthPerYears) {\n        const first_process = last_date === null;\n        const date_text = {\n            'Quarter Day_lower': date_utils.format(\n                date,\n                'HH',\n                this.options.language\n            ),\n            'Half Day_lower': date_utils.format(\n                date,\n                'HH',\n                this.options.language\n            ),\n            Day_lower:\n                first_process || date.getDate() !== last_date.getDate()\n                    ? date_utils.format(date, 'D', this.options.language)\n                    : '',\n            Week_lower:\n                first_process || date.getMonth() !== last_date.getMonth()\n                    ? date_utils.format(date, 'D MMM', this.options.language)\n                    : date_utils.format(date, 'D', this.options.language),\n            Month_lower: date_utils.format(date, 'MMMM', this.options.language),\n            Year_lower: date_utils.format(date, 'YYYY', this.options.language),\n            'Quarter Day_upper':\n                first_process || date.getDate() !== last_date.getDate()\n                    ? date_utils.format(date, 'D MMM', this.options.language)\n                    : '',\n            'Half Day_upper':\n                first_process || date.getDate() !== last_date.getDate()\n                    ? first_process || date.getMonth() !== last_date.getMonth()\n                        ? date_utils.format(\n                              date,\n                              'D MMM',\n                              this.options.language\n                          )\n                        : date_utils.format(date, 'D', this.options.language)\n                    : '',\n            Day_upper:\n                first_process || date.getMonth() !== last_date.getMonth()\n                    ? date_utils.format(date, 'MMMM', this.options.language)\n                    : '',\n            Week_upper:\n                first_process || date.getMonth() !== last_date.getMonth()\n                    ? date_utils.format(\n                          date,\n                          `MMMM${\n                              i < 5 || date.getMonth() === 0 ? ' YYYY' : ''\n                          }`,\n                          this.options.language\n                      )\n                    : '',\n            Month_upper:\n                first_process || date.getFullYear() !== last_date.getFullYear()\n                    ? date_utils.format(date, 'YYYY', this.options.language)\n                    : '',\n            Year_upper:\n                first_process || date.getFullYear() !== last_date.getFullYear()\n                    ? date_utils.format(date, 'YYYY', this.options.language)\n                    : '',\n        };\n\n        const base_pos = {\n            x: i * this.options.column_width,\n            lower_y: this.options.header_height,\n            upper_y: this.options.header_height - 25,\n        };\n\n        const x_pos = {\n            'Quarter Day_lower': 0,\n            'Quarter Day_upper': (this.options.column_width * 4) / 2,\n            'Half Day_lower': 0,\n            'Half Day_upper': (this.options.column_width * 2) / 2,\n            Day_lower: this.options.column_width / 2,\n            Day_upper: (this.options.column_width * 30) / 2,\n            Week_lower: 0,\n            Week_upper: (this.options.column_width * 4) / 2,\n            Month_lower: this.options.column_width / 2,\n            Month_upper:\n                (this.options.column_width *\n                    monthPerYears[date.getFullYear()]) /\n                2,\n            Year_lower: this.options.column_width / 2,\n            Year_upper: (this.options.column_width * 30) / 2,\n        };\n\n        return {\n            upper_text: date_text[`${this.options.view_mode}_upper`],\n            lower_text: date_text[`${this.options.view_mode}_lower`],\n            upper_x: base_pos.x + x_pos[`${this.options.view_mode}_upper`],\n            upper_y: base_pos.upper_y,\n            lower_x: base_pos.x + x_pos[`${this.options.view_mode}_lower`],\n            lower_y: base_pos.lower_y,\n        };\n    }\n\n    make_bars() {\n        this.bars = this.tasks.map((task) => {\n            const bar = new Bar(this, task);\n\n            return bar;\n        });\n        this.visible_bars = this.visible_tasks.map((task) => {\n            const bar = new Bar(this, task);\n            this.layers.bar.appendChild(bar.group);\n            if (task.type === 'project' || task.type === 'tag') {\n                bar.group.classList.add(task.type);\n            }\n            return bar;\n        });\n    }\n\n    make_arrows() {\n        this.arrows = [];\n        for (let task of this.visible_tasks) {\n            let arrows = [];\n            arrows = task.dependencies\n                .map((task_id) => {\n                    const dependency = this.get_task(task_id);\n                    if (!dependency) return;\n                    const arrow = new Arrow(\n                        this,\n                        this.visible_bars[dependency._index], // from_task\n                        this.visible_bars[task._index] // to_task\n                    );\n                    this.layers.arrow.appendChild(arrow.element);\n                    return arrow;\n                })\n                .filter(Boolean); // filter falsy values\n            this.arrows = this.arrows.concat(arrows);\n        }\n    }\n\n    map_arrows_on_bars() {\n        for (let bar of this.visible_bars) {\n            bar.arrows = this.arrows.filter((arrow) => {\n                return (\n                    arrow.from_task.task.id === bar.task.id ||\n                    arrow.to_task.task.id === bar.task.id\n                );\n            });\n        }\n    }\n\n    set_width() {\n        const cur_width = this.$svg.getBoundingClientRect().width;\n        const actual_width = this.$svg\n            .querySelector('.grid .grid-row')\n            .getAttribute('width');\n        if (cur_width < actual_width) {\n            this.$svg.setAttribute('width', actual_width);\n        }\n    }\n\n    bind_scroll() {\n        $.on(\n            this.$svg.parentElement,\n            'scroll',\n            this.debounce(this.handle_scroll.bind(this), 50)\n        );\n    }\n\n    handle_scroll(e) {\n        const parent_element = this.$svg.parentElement;\n\n        if (!parent_element) return;\n\n        const content_width = this.$svg.clientWidth;\n        const container_width = parent_element.offsetWidth;\n        const scroll_position = parent_element.scrollLeft;\n        const scroll_percentage =\n            (scroll_position + container_width / 2) / content_width;\n\n        const time_difference =\n            this.gantt_end.getTime() - this.gantt_start.getTime();\n        const time_offset = scroll_percentage * time_difference;\n        const middle_date = new Date(this.gantt_start.getTime() + time_offset);\n\n        this.current_location = middle_date;\n    }\n\n    set_scroll_position() {\n        const parent_element = this.$svg.parentElement;\n\n        if (!parent_element) return;\n\n        if (!this.current_location) {\n            const hours_before_first_task = date_utils.diff(\n                this.get_oldest_starting_date(),\n                this.gantt_start,\n                'hour'\n            );\n\n            const scroll_pos =\n                (hours_before_first_task / this.options.step) *\n                    this.options.column_width -\n                this.options.column_width;\n\n            parent_element.scrollLeft = scroll_pos;\n        } else {\n            const time_difference =\n                this.gantt_end.getTime() - this.gantt_start.getTime();\n            const time_offset =\n                this.current_location.getTime() - this.gantt_start.getTime();\n\n            const scroll_percentage = time_offset / time_difference;\n\n            const newScrollPosition =\n                Math.round(this.$svg.clientWidth * scroll_percentage) -\n                parent_element.offsetWidth / 2;\n\n            parent_element.scrollLeft = newScrollPosition;\n        }\n    }\n\n    bind_grid_click() {\n        // add\n        let is_dragging = false;\n        let x_on_start = 0;\n        // ...\n        $.on(\n            this.$svg,\n            this.options.popup_trigger,\n            '.grid-row, .grid-header',\n            () => {\n                this.unselect_all();\n                this.hide_popup();\n            }\n        );\n        // add\n        $.on(this.$svg, 'mousedown', '.grid-row, .today-highlight', (e) => {\n            is_dragging = true;\n            x_on_start = e.clientX;\n            if (this.$svg.parentElement) {\n                this.$svg.parentElement.style.cursor = 'move';\n            }\n        });\n        $.on(this.$svg, 'mousemove', '.grid-row, .today-highlight', (e) => {\n            if (!is_dragging) {\n                return;\n            }\n            const dx = e.clientX - x_on_start;\n            const parent_element = this.$svg.parentElement;\n            if (!parent_element) return;\n            parent_element.style.cursor = 'move';\n            parent_element.scrollLeft -= dx * 1.5;\n            x_on_start = e.clientX;\n        });\n\n        document.addEventListener('mouseup', (e) => {\n            if (this.$svg.parentElement) {\n                this.$svg.parentElement.style.cursor = 'default';\n            }\n            is_dragging = false;\n            x_on_start = 0;\n        });\n        // ...\n    }\n\n    sort_bars() {\n        const changed_bars = [];\n        if (!this.bars) {\n            return changed_bars;\n        }\n        this.bars = this.bars.sort((b0, b1) => {\n            return b0.$bar.getY() - b1.$bar.getY();\n        });\n\n        this.tasks = this.bars.map((b, i) => {\n            const task = b.task;\n            if (task._index !== i) {\n                changed_bars.push(b);\n            }\n            task._index = i;\n            return task;\n        });\n        return changed_bars;\n    }\n\n    bind_bar_events() {\n        let is_dragging = false;\n        let x_on_start = 0;\n        let y_on_start = 0;\n        let is_resizing_left = false;\n        let is_resizing_right = false;\n        let parent_bar_id = null;\n        let bars = []; // instanceof Bars, the dragged bar and its children\n        let parent_bars = [];\n        const min_y = this.options.header_height;\n        const max_y =\n            this.options.header_height +\n            this.tasks.length *\n                (this.options.bar_height + this.options.padding);\n        this.bar_being_dragged = null; // instanceof dragged bar\n\n        function action_in_progress() {\n            return is_dragging || is_resizing_left || is_resizing_right;\n        }\n        let is_collapsable_dragging = false;\n        let startX, startY;\n\n        // Event listener for mouse down to track dragging\n        $.on(this.$svg, 'mousedown', '.collapsable, .caret', (e) => {\n            is_collapsable_dragging = false;\n            startX = e.clientX;\n            startY = e.clientY;\n        });\n\n        // Event listener for mouse move to track dragging\n        $.on(this.$svg, 'mousemove', (e) => {\n            if (!action_in_progress()) return;\n            if (\n                Math.abs(e.clientX - startX) > 5 ||\n                Math.abs(e.clientY - startY) > 5\n            ) {\n                is_collapsable_dragging = true;\n            }\n        });\n\n        // Event listener for mouse up to check if it's a click or a drag\n        $.on(\n            this.$svg,\n            'mouseup',\n            '.collapsable, .caret',\n            (e, caretElement) => {\n                if (!is_collapsable_dragging) {\n                    this.hide_popup();\n                    const parentBarWrapper =\n                        caretElement.closest('.bar-wrapper');\n                    if (parentBarWrapper) {\n                        const parentTaskId =\n                            parentBarWrapper.getAttribute('data-id');\n                        const parentBar = this.get_task(parentTaskId);\n                        const dependentTasks =\n                            this.get_all_dependent_tasks(parentTaskId);\n\n                        parentBar.collapsed = !parentBar.collapsed;\n\n                        dependentTasks.forEach((task_id) => {\n                            const task = this.get_task(task_id, this.tasks);\n\n                            if (\n                                parentBar.collapsed == true ||\n                                this.get_task(task.dependencies[0]).collapsed ==\n                                    true\n                            ) {\n                                task.visible = false;\n                            } else {\n                                task.visible = true;\n                            }\n                        });\n\n                        this.refresh(this.tasks);\n                    }\n                }\n            }\n        );\n\n        $.on(this.$svg, 'mousedown', '.bar-wrapper, .handle', (e, element) => {\n            const bar_wrapper = $.closest('.bar-wrapper', element);\n\n            if (element.classList.contains('left')) {\n                is_resizing_left = true;\n            } else if (element.classList.contains('right')) {\n                is_resizing_right = true;\n            } else if (element.classList.contains('bar-wrapper')) {\n                is_dragging = true;\n            }\n\n            bar_wrapper.classList.add('active');\n\n            x_on_start = e.clientX;\n            y_on_start = e.clientY;\n\n            parent_bar_id = bar_wrapper.getAttribute('data-id');\n            const ids = [\n                parent_bar_id,\n                ...this.get_all_dependent_tasks(parent_bar_id),\n            ];\n\n            bars = ids.map((id) => {\n                let bar;\n                if (this.get_task(id).visible == false) {\n                    bar = this.get_hidden_bar(id);\n                } else {\n                    bar = this.get_bar(id);\n                }\n\n                if (!bar) return;\n                if (parent_bar_id === id) {\n                    this.bar_being_dragged = bar;\n                }\n\n                const $bar = bar.$bar;\n                $bar.ox = $bar.getX();\n                $bar.oy = $bar.getY();\n                $bar.owidth = $bar.getWidth();\n                $bar.finaldx = 0;\n                $bar.finaldy = 0;\n\n                return bar;\n            });\n            parent_bars = this.get_all_parent_tasks(parent_bar_id).map(\n                (bar) => {\n                    const $bar = bar.$bar;\n                    $bar.ox = $bar.getX();\n                    $bar.oy = $bar.getY();\n                    $bar.owidth = $bar.getWidth();\n                    $bar.finaldx = 0;\n                    $bar.finaldy = 0;\n                    return bar;\n                }\n            );\n        });\n\n        $.on(this.$svg, 'mousemove', (e) => {\n            if (!action_in_progress()) return;\n\n            const dx = e.clientX - x_on_start;\n            const dy = e.clientY - y_on_start;\n\n            this.hide_popup();\n\n            // update the dragged bar\n            const bar_being_dragged = this.bar_being_dragged;\n            bar_being_dragged.$bar.finaldx = this.get_snap_position(dx);\n            if (is_resizing_left) {\n                bar_being_dragged.update_bar_position({\n                    x:\n                        bar_being_dragged.$bar.ox +\n                        bar_being_dragged.$bar.finaldx,\n                    width:\n                        bar_being_dragged.$bar.owidth -\n                        bar_being_dragged.$bar.finaldx,\n                });\n            } else if (is_resizing_right) {\n                bar_being_dragged.update_bar_position({\n                    width:\n                        bar_being_dragged.$bar.owidth +\n                        bar_being_dragged.$bar.finaldx,\n                });\n            } else if (is_dragging) {\n                let y = bar_being_dragged.$bar.oy + dy;\n                if (y < min_y) {\n                    y = min_y;\n                } else if (y > max_y) {\n                    y = max_y;\n                }\n                bar_being_dragged.update_bar_position({\n                    x:\n                        bar_being_dragged.$bar.ox +\n                        bar_being_dragged.$bar.finaldx,\n                    y: this.options.sortable ? y : null,\n                });\n            }\n\n            // update project and tag bars when resizing or moving children\n            parent_bars.forEach((ancestor_bar) => {\n                if (\n                    ancestor_bar.task.type == 'project' ||\n                    ancestor_bar.task.type == 'tag'\n                ) {\n                    let max_x = -Infinity;\n                    let min_x = Infinity;\n                    this.get_all_dependent_tasks(ancestor_bar.task.id).forEach(\n                        (bar_id) => {\n                            const bar = this.get_bar(bar_id);\n                            if (bar) {\n                                if (bar.$bar.getX() < min_x)\n                                    min_x = bar.$bar.getX();\n                                if (\n                                    bar.$bar.getWidth() + bar.$bar.getX() >\n                                    max_x\n                                )\n                                    max_x =\n                                        bar.$bar.getWidth() + bar.$bar.getX();\n                            }\n                        }\n                    );\n                    if (min_x > ancestor_bar.$bar.ox) {\n                        ancestor_bar.update_bar_position({\n                            x: min_x,\n                            width: max_x - min_x,\n                        });\n                    } else if (min_x < ancestor_bar.$bar.ox) {\n                        ancestor_bar.update_bar_position({\n                            x: min_x,\n                            width: max_x - min_x,\n                        });\n                    } else {\n                        ancestor_bar.update_bar_position({\n                            width: max_x - ancestor_bar.$bar.ox,\n                        });\n                    }\n                    ancestor_bar.date_changed();\n                }\n            });\n\n            // update children\n            bars.forEach((bar) => {\n                if (!bar) return;\n                if (bar.task.id === parent_bar_id) {\n                    return;\n                }\n                const $bar = bar.$bar;\n                $bar.finaldx = this.get_snap_position(dx);\n                this.hide_popup();\n                if (is_resizing_left) {\n                    bar.update_bar_position({\n                        x: $bar.ox + $bar.finaldx,\n                    });\n                } else if (is_dragging) {\n                    bar.update_bar_position({\n                        x: $bar.ox + $bar.finaldx,\n                    });\n                }\n            });\n\n            // update y pos\n            if (\n                this.options.sortable &&\n                is_dragging &&\n                Math.abs(dy - bar_being_dragged.$bar.finaldy) >\n                    bar_being_dragged.height\n            ) {\n                this.sort_bars().map((bar) => {\n                    const y = bar.compute_y();\n                    if (bar.task.id === parent_bar_id) {\n                        bar.$bar.finaldy = y - bar.$bar.oy;\n                        return;\n                    }\n                    bar.date_changed();\n                    bar.update_bar_position({ y: y });\n                });\n            }\n        });\n\n        document.addEventListener('mouseup', (e) => {\n            const dy = e.clientY - y_on_start;\n            if (is_dragging || is_resizing_left || is_resizing_right) {\n                bars.forEach((bar) => {\n                    if (!bar) return;\n                    bar.group.classList.remove('active');\n\n                    const $bar = bar.$bar;\n                    if ($bar.finaldx) {\n                        bar.date_changed();\n                        bar.set_action_completed();\n                    }\n                });\n                const $bar = this.bar_being_dragged.$bar;\n                if (this.options.sortable && dy !== $bar.finaldy) {\n                    this.bar_being_dragged.update_bar_position({\n                        y: $bar.oy + $bar.finaldy,\n                    });\n                    this.bar_being_dragged.date_changed();\n                }\n            }\n\n            this.bar_being_dragged = null;\n            is_dragging = false;\n            is_resizing_left = false;\n            is_resizing_right = false;\n        });\n\n        // Sticky date header\n        $.on(this.$container, 'scroll', (e) => {\n            this.layers.date.setAttribute(\n                'transform',\n                'translate(0,' + e.currentTarget.scrollTop + ')'\n            );\n        });\n\n        this.bind_bar_progress();\n    }\n\n    bind_bar_progress() {\n        let x_on_start = 0;\n        let y_on_start = 0;\n        let is_resizing = null;\n        let bar = null;\n        let $bar_progress = null;\n        let $bar = null;\n\n        $.on(this.$svg, 'mousedown', '.handle.progress', (e, handle) => {\n            is_resizing = true;\n            x_on_start = e.clientX;\n            y_on_start = e.clientY;\n\n            const $bar_wrapper = $.closest('.bar-wrapper', handle);\n            const id = $bar_wrapper.getAttribute('data-id');\n            bar = this.get_bar(id);\n\n            $bar_progress = bar.$bar_progress;\n            $bar = bar.$bar;\n\n            $bar_progress.finaldx = 0;\n            $bar_progress.owidth = $bar_progress.getWidth();\n            $bar_progress.min_dx = -$bar_progress.getWidth();\n            $bar_progress.max_dx = $bar.getWidth() - $bar_progress.getWidth();\n        });\n\n        $.on(this.$svg, 'mousemove', (e) => {\n            if (!is_resizing) return;\n            let dx = e.clientX - x_on_start;\n            let dy = e.clientY - y_on_start;\n\n            if (dx > $bar_progress.max_dx) {\n                dx = $bar_progress.max_dx;\n            }\n            if (dx < $bar_progress.min_dx) {\n                dx = $bar_progress.min_dx;\n            }\n\n            const $handle = bar.$handle_progress;\n            $.attr($bar_progress, 'width', $bar_progress.owidth + dx);\n            $.attr($handle, 'points', bar.get_progress_polygon_points());\n            $bar_progress.finaldx = dx;\n        });\n\n        $.on(this.$svg, 'mouseup', () => {\n            is_resizing = false;\n            if (!($bar_progress && $bar_progress.finaldx)) return;\n            bar.progress_changed();\n            bar.set_action_completed();\n        });\n    }\n\n    get_all_dependent_tasks(task_id) {\n        let out = [];\n        let to_process = [task_id];\n        while (to_process.length) {\n            const deps = to_process.reduce((acc, curr) => {\n                acc = acc.concat(this.dependency_map[curr]);\n                return acc;\n            }, []);\n\n            out = out.concat(deps);\n            to_process = deps.filter((d) => !to_process.includes(d));\n        }\n\n        return out.filter(Boolean);\n    }\n\n    get_all_parent_tasks(task_id) {\n        const out = [];\n        const to_process = [task_id];\n        const processedTasks = new Set();\n\n        while (to_process.length) {\n            const deps = to_process.reduce((acc, curr) => {\n                acc = acc.concat(this.ancestor_map[curr] || []);\n                return acc;\n            }, []);\n\n            for (const dep of deps) {\n                if (!processedTasks.has(dep)) {\n                    processedTasks.add(dep);\n                    const taskObject = this.get_bar(dep);\n\n                    if (taskObject) {\n                        out.push(taskObject);\n                    }\n\n                    to_process.push(dep);\n                }\n            }\n\n            to_process.shift();\n        }\n\n        return out;\n    }\n\n    get_snap_position(dx) {\n        let odx = dx,\n            rem,\n            position;\n\n        if (this.view_is(VIEW_MODE.WEEK)) {\n            rem = dx % (this.options.column_width / 7);\n            position =\n                odx -\n                rem +\n                (rem < this.options.column_width / 14\n                    ? 0\n                    : this.options.column_width / 7);\n        } else if (this.view_is(VIEW_MODE.MONTH)) {\n            rem = dx % (this.options.column_width / 30);\n            position =\n                odx -\n                rem +\n                (rem < this.options.column_width / 60\n                    ? 0\n                    : this.options.column_width / 30);\n        } else {\n            rem = dx % this.options.column_width;\n            position =\n                odx -\n                rem +\n                (rem < this.options.column_width / 2\n                    ? 0\n                    : this.options.column_width);\n        }\n        return position;\n    }\n\n    unselect_all() {\n        [...this.$svg.querySelectorAll('.bar-wrapper')].forEach((el) => {\n            el.classList.remove('active');\n        });\n    }\n\n    view_is(modes) {\n        if (typeof modes === 'string') {\n            return this.options.view_mode === modes;\n        }\n\n        if (Array.isArray(modes)) {\n            return modes.some((mode) => this.options.view_mode === mode);\n        }\n\n        return false;\n    }\n\n    get_task(id, tasks_array = this.tasks) {\n        return tasks_array.find((task) => {\n            return task.id === id;\n        });\n    }\n\n    get_bar(id) {\n        return this.visible_bars.find((bar) => {\n            return bar.task.id === id;\n        });\n    }\n\n    get_hidden_bar(id) {\n        return this.bars.find((bar) => {\n            return bar.task.id === id;\n        });\n    }\n\n    show_popup(options) {\n        if (!this.popup) {\n            this.popup = new Popup(\n                this.popup_wrapper,\n                this.options.custom_popup_html\n            );\n        }\n        this.popup.show(options);\n    }\n\n    hide_popup() {\n        this.popup && this.popup.hide();\n    }\n\n    trigger_event(event, args) {\n        if (this.options['on_' + event]) {\n            this.options['on_' + event].apply(null, args);\n        }\n    }\n\n    get_oldest_starting_date() {\n        return this.tasks\n            .map((task) => task._start)\n            .reduce((prev_date, cur_date) =>\n                cur_date <= prev_date ? cur_date : prev_date\n            );\n    }\n\n    clear() {\n        this.$svg.innerHTML = '';\n    }\n}\n\nGantt.VIEW_MODE = VIEW_MODE;\n\nfunction generate_id(task) {\n    return task.name + '_' + Math.random().toString(36).slice(2, 12);\n}\n"],"names":["YEAR","MONTH","DAY","HOUR","MINUTE","SECOND","MILLISECOND","month_names","en","es","it","ru","ptBr","fr","tr","zh","de","hu","date_utils","parse","date","date_separator","time_separator","Date","date_parts","time_parts","parts","split","map","val","parseInt","vals","length","parseFloat","concat","to_string","with_time","TypeError","this","get_date_values","i","padStart","date_string","time_string","format","format_string","lang","values","d","format_map","YYYY","MM","DD","HH","mm","ss","SSS","D","MMMM","MMM","str","formatted_values","Object","keys","sort","a","b","forEach","key","includes","replace","push","value","diff","date_a","date_b","scale","milliseconds","seconds","hours","minutes","days","months","years","endsWith","Math","floor","today","slice","now","add","qty","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","start_of","scores","should_reset","_scale","clone","get_days_in_month","no_of_days","month","year","targetLength","padString","String","repeat","$","expr","con","document","querySelector","createSVG","tag","attrs","elem","createElementNS","attr","append_to","appendChild","innerHTML","setAttribute","animateSVG","svgElement","from","to","animatedSvgElement","dur","begin","animEl","attributeName","animateElement","calcMode","keyTimes","keySplines","cubic_bezier","getAnimationElement","event","createEvent","initEvent","eventName","dispatchEvent","name","ease","linear","on","element","selector","callback","delegate","bind","off","handler","removeEventListener","addEventListener","e","delegatedTarget","target","closest","call","matches","parentNode","getAttribute","Bar","constructor","gantt","task","set_defaults","prepare","draw","pickColorBasedOnBG","bgColor","hex","toString","color","charAt","substring","pickStripeColorBasedOnBG","action_completed","prepare_values","prepare_helpers","invalid","height","options","bar_height","x","compute_x","y","compute_y","corner_radius","bar_corner_radius","duration","_end","_start","step","width","column_width","progress_width","progress","group","class","custom_class","id","bar_group","handle_group","SVGElement","prototype","getX","getY","getWidth","getHeight","getEndX","draw_bar","draw_bar_pattern","draw_progress_bar","draw_label","draw_carets","draw_resize_handles","$bar_pattern","rx","ry","style","classList","$bar","$bar_progress","requestAnimationFrame","update_label_position","bar","$handle_progress","points","get_progress_polygon_points","join","setTimeout","label","get_all_dependent_tasks","getBBox","caretWidth","caretHeight","caretX","caretY","bar_progress","setup_click_event","popup_trigger","unselect_all","trigger_event","show_popup","bar_being_dragged","subtitle","language","target_element","title","update_bar_position","bar_pattern","update_attr","update_handle_position","update_progressbar_position","update_underlying_bar_position","update_arrow_position","date_changed","changed","new_start_date","new_end_date","compute_start_end_date","Number","progress_changed","new_progress","compute_progress","set_action_completed","x_in_units","gantt_start","width_in_units","task_start","view_is","header_height","padding","_index","get_snap_position","dx","rem","position","odx","isNaN","underBar","remove","caretElement","caretPoints","handle","arrows","arrow","update","Arrow","from_task","to_task","calculate_path","start_x","condition","start_y","end_x","end_y","from_is_below_to","curve","arrow_curve","clockwise","curve_y","offset","path","down_1","down_2","left","Popup","parent","custom_html","make","hide","pointer","show","Error","html","clientWidth","position_meta","HTMLElement","getBoundingClientRect","top","transform","opacity","VIEW_MODE","QUARTER_DAY","HALF_DAY","WEEK","Gantt","wrapper","tasks","current_location","setup_wrapper","setup_options","setup_tasks","change_view_mode","bind_events","debounce","func","wait","timeout","context","args","arguments","clearTimeout","apply","svg_element","wrapper_element","$svg","$container","createElement","parentElement","popup_wrapper","default_options","view_modes","view_mode","date_format","custom_popup_html","sortable","assign","visible_tasks","filter","visible","undefined","start","end","every","dependencies","deps","trim","random","generate_id","setup_dependencies","setup_ancestors","updateTaskVisibility","visibility","originalTask","originalTasks","find","t","dependency_map","ancestor_map","refresh","mode","update_view_scale","setup_dates","render","scale_view_mode","zoomValue","indexOf","setup_gantt_dates","setup_date_values","gantt_end","dates","cur_date","bind_grid_click","bind_bar_events","bind_scroll","clear","setup_layers","make_grid","make_dates","make_bars","make_arrows","map_arrows_on_bars","set_width","set_scroll_position","layers","layer","make_grid_background","make_grid_rows","make_grid_header","make_grid_ticks","make_grid_highlights","grid_width","grid_height","grid","rows_layer","lines_layer","row_width","row_height","row_y","data_row","x1","y1","x2","y2","tick_x","tick_y","tick_height","tick_class","get_dates_to_draw","lower_x","lower_y","lower_text","upper_text","$upper_text","upper_x","upper_y","monthPerYears","last_date","get_date_info","first_process","date_text","Day_lower","Week_lower","Month_lower","Year_lower","Day_upper","Week_upper","Month_upper","Year_upper","base_pos","x_pos","bars","visible_bars","type","task_id","dependency","get_task","Boolean","cur_width","actual_width","handle_scroll","parent_element","content_width","container_width","offsetWidth","time_offset","scrollLeft","getTime","middle_date","time_difference","scroll_percentage","newScrollPosition","round","scroll_pos","get_oldest_starting_date","is_dragging","x_on_start","hide_popup","clientX","cursor","sort_bars","changed_bars","b0","b1","y_on_start","is_resizing_left","is_resizing_right","parent_bar_id","parent_bars","min_y","max_y","action_in_progress","startX","startY","is_collapsable_dragging","clientY","abs","parentBarWrapper","parentTaskId","parentBar","dependentTasks","collapsed","bar_wrapper","contains","ids","get_hidden_bar","get_bar","ox","oy","owidth","finaldx","finaldy","get_all_parent_tasks","dy","ancestor_bar","max_x","Infinity","min_x","bar_id","currentTarget","scrollTop","bind_bar_progress","is_resizing","min_dx","max_dx","$handle","out","to_process","reduce","acc","curr","processedTasks","Set","dep","has","taskObject","shift","querySelectorAll","el","modes","Array","isArray","some","tasks_array","popup","prev_date"],"mappings":"kCAAA,MAAMA,EAAO,OACPC,EAAQ,QACRC,EAAM,MACNC,EAAO,OACPC,EAAS,SACTC,EAAS,SACTC,EAAc,cAEdC,EAAc,CAChBC,GAAI,CACA,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAEJC,GAAI,CACA,QACA,UACA,QACA,QACA,OACA,QACA,QACA,SACA,aACA,UACA,YACA,aAEJC,GAAI,CACA,UACA,WACA,QACA,SACA,SACA,SACA,SACA,SACA,YACA,UACA,WACA,YAEJC,GAAI,CACA,SACA,UACA,OACA,SACA,MACA,OACA,OACA,SACA,WACA,UACA,SACA,WAEJC,KAAM,CACF,UACA,YACA,QACA,QACA,OACA,QACA,QACA,SACA,WACA,UACA,WACA,YAEJC,GAAI,CACA,UACA,UACA,OACA,QACA,MACA,OACA,UACA,OACA,YACA,UACA,WACA,YAEJC,GAAI,CACA,OACA,QACA,OACA,QACA,QACA,UACA,SACA,UACA,QACA,OACA,QACA,UAEJC,GAAI,CACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,OAEJC,GAAI,CACA,SACA,UACA,OACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAEJC,GAAI,CACA,SACA,UACA,UACA,UACA,QACA,SACA,SACA,YACA,aACA,UACA,WACA,aAIO,IAAAC,EAAA,CACXC,MAAMC,EAAMC,EAAiB,IAAKC,EAAiB,QAC/C,GAAIF,aAAgBG,KAChB,OAAOH,EAEX,GAAoB,iBAATA,EAAmB,CAC1B,IAAII,EAAYC,EAChB,MAAMC,EAAQN,EAAKO,MAAM,KAEzBH,EAAaE,EAAM,GACdC,MAAMN,GACNO,KAAKC,GAAQC,SAASD,EAAK,MAChCJ,EAAaC,EAAM,IAAMA,EAAM,GAAGC,MAAML,GAGxCE,EAAW,GAAKA,EAAW,GAAK,EAEhC,IAAIO,EAAOP,EAUX,OARIC,GAAcA,EAAWO,SACA,GAArBP,EAAWO,SACXP,EAAW,GAAK,KAAOA,EAAW,GAClCA,EAAW,GAAiC,IAA5BQ,WA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"}