{"version":3,"file":"frappe-gantt.min.js","sources":["../src/date_utils.js","../src/svg_utils.js","../src/bar.js","../src/arrow.js","../src/popup.js","../src/index.js"],"sourcesContent":["const YEAR = 'year';\nconst MONTH = 'month';\nconst DAY = 'day';\nconst HOUR = 'hour';\nconst MINUTE = 'minute';\nconst SECOND = 'second';\nconst MILLISECOND = 'millisecond';\n\nconst month_names = {\n    en: [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December',\n    ],\n    es: [\n        'Enero',\n        'Febrero',\n        'Marzo',\n        'Abril',\n        'Mayo',\n        'Junio',\n        'Julio',\n        'Agosto',\n        'Septiembre',\n        'Octubre',\n        'Noviembre',\n        'Diciembre',\n    ],\n    it: [\n        'Gennaio',\n        'Febbraio',\n        'Marzo',\n        'Aprile',\n        'Maggio',\n        'Giugno',\n        'Luglio',\n        'Agosto',\n        'Settembre',\n        'Ottobre',\n        'Novembre',\n        'Dicembre',\n    ],\n    ru: [\n        'Январь',\n        'Февраль',\n        'Март',\n        'Апрель',\n        'Май',\n        'Июнь',\n        'Июль',\n        'Август',\n        'Сентябрь',\n        'Октябрь',\n        'Ноябрь',\n        'Декабрь',\n    ],\n    ptBr: [\n        'Janeiro',\n        'Fevereiro',\n        'Março',\n        'Abril',\n        'Maio',\n        'Junho',\n        'Julho',\n        'Agosto',\n        'Setembro',\n        'Outubro',\n        'Novembro',\n        'Dezembro',\n    ],\n    fr: [\n        'Janvier',\n        'Février',\n        'Mars',\n        'Avril',\n        'Mai',\n        'Juin',\n        'Juillet',\n        'Août',\n        'Septembre',\n        'Octobre',\n        'Novembre',\n        'Décembre',\n    ],\n    tr: [\n        'Ocak',\n        'Şubat',\n        'Mart',\n        'Nisan',\n        'Mayıs',\n        'Haziran',\n        'Temmuz',\n        'Ağustos',\n        'Eylül',\n        'Ekim',\n        'Kasım',\n        'Aralık',\n    ],\n    zh: [\n        '一月',\n        '二月',\n        '三月',\n        '四月',\n        '五月',\n        '六月',\n        '七月',\n        '八月',\n        '九月',\n        '十月',\n        '十一月',\n        '十二月',\n    ],\n    de: [\n        'Januar',\n        'Februar',\n        'März',\n        'April',\n        'Mai',\n        'Juni',\n        'Juli',\n        'August',\n        'September',\n        'Oktober',\n        'November',\n        'Dezember',\n    ],\n    hu: [\n        'Január',\n        'Február',\n        'Március',\n        'Április',\n        'Május',\n        'Június',\n        'Július',\n        'Augusztus',\n        'Szeptember',\n        'Október',\n        'November',\n        'December',\n    ],\n};\n\nexport default {\n    parse(date, date_separator = '-', time_separator = /[.:]/) {\n        if (date instanceof Date) {\n            return date;\n        }\n        if (typeof date === 'string') {\n            let date_parts, time_parts;\n            const parts = date.split(' ');\n\n            date_parts = parts[0]\n                .split(date_separator)\n                .map((val) => parseInt(val, 10));\n            time_parts = parts[1] && parts[1].split(time_separator);\n\n            // month is 0 indexed\n            date_parts[1] = date_parts[1] - 1;\n\n            let vals = date_parts;\n\n            if (time_parts && time_parts.length) {\n                if (time_parts.length == 4) {\n                    time_parts[3] = '0.' + time_parts[3];\n                    time_parts[3] = parseFloat(time_parts[3]) * 1000;\n                }\n                vals = vals.concat(time_parts);\n            }\n\n            return new Date(...vals);\n        }\n    },\n\n    to_string(date, with_time = false) {\n        if (!(date instanceof Date)) {\n            throw new TypeError('Invalid argument type');\n        }\n        const vals = this.get_date_values(date).map((val, i) => {\n            if (i === 1) {\n                // add 1 for month\n                val = val + 1;\n            }\n\n            if (i === 6) {\n                return padStart(val + '', 3, '0');\n            }\n\n            return padStart(val + '', 2, '0');\n        });\n        const date_string = `${vals[0]}-${vals[1]}-${vals[2]}`;\n        const time_string = `${vals[3]}:${vals[4]}:${vals[5]}.${vals[6]}`;\n\n        return date_string + (with_time ? ' ' + time_string : '');\n    },\n\n    format(date, format_string = 'YYYY-MM-DD HH:mm:ss.SSS', lang = 'en') {\n        const values = this.get_date_values(date).map((d) => padStart(d, 2, 0));\n        const format_map = {\n            YYYY: values[0],\n            MM: padStart(+values[1] + 1, 2, 0),\n            DD: values[2],\n            HH: values[3],\n            mm: values[4],\n            ss: values[5],\n            SSS: values[6],\n            D: values[2],\n            MMMM: month_names[lang][+values[1]],\n            MMM: month_names[lang][+values[1]],\n        };\n\n        let str = format_string;\n        const formatted_values = [];\n\n        Object.keys(format_map)\n            .sort((a, b) => b.length - a.length) // big string first\n            .forEach((key) => {\n                if (str.includes(key)) {\n                    str = str.replace(key, `$${formatted_values.length}`);\n                    formatted_values.push(format_map[key]);\n                }\n            });\n\n        formatted_values.forEach((value, i) => {\n            str = str.replace(`$${i}`, value);\n        });\n\n        return str;\n    },\n\n    diff(date_a, date_b, scale = DAY) {\n        let milliseconds, seconds, hours, minutes, days, months, years;\n\n        milliseconds = date_a - date_b;\n        seconds = milliseconds / 1000;\n        minutes = seconds / 60;\n        hours = minutes / 60;\n        days = hours / 24;\n        months = days / 30;\n        years = months / 12;\n\n        if (!scale.endsWith('s')) {\n            scale += 's';\n        }\n\n        return Math.floor(\n            {\n                milliseconds,\n                seconds,\n                minutes,\n                hours,\n                days,\n                months,\n                years,\n            }[scale]\n        );\n    },\n\n    today() {\n        const vals = this.get_date_values(new Date()).slice(0, 3);\n        return new Date(...vals);\n    },\n\n    now() {\n        return new Date();\n    },\n\n    add(date, qty, scale) {\n        qty = parseInt(qty, 10);\n        const vals = [\n            date.getFullYear() + (scale === YEAR ? qty : 0),\n            date.getMonth() + (scale === MONTH ? qty : 0),\n            date.getDate() + (scale === DAY ? qty : 0),\n            date.getHours() + (scale === HOUR ? qty : 0),\n            date.getMinutes() + (scale === MINUTE ? qty : 0),\n            date.getSeconds() + (scale === SECOND ? qty : 0),\n            date.getMilliseconds() + (scale === MILLISECOND ? qty : 0),\n        ];\n        return new Date(...vals);\n    },\n\n    start_of(date, scale) {\n        const scores = {\n            [YEAR]: 6,\n            [MONTH]: 5,\n            [DAY]: 4,\n            [HOUR]: 3,\n            [MINUTE]: 2,\n            [SECOND]: 1,\n            [MILLISECOND]: 0,\n        };\n\n        function should_reset(_scale) {\n            const max_score = scores[scale];\n            return scores[_scale] <= max_score;\n        }\n\n        const vals = [\n            date.getFullYear(),\n            should_reset(YEAR) ? 0 : date.getMonth(),\n            should_reset(MONTH) ? 1 : date.getDate(),\n            should_reset(DAY) ? 0 : date.getHours(),\n            should_reset(HOUR) ? 0 : date.getMinutes(),\n            should_reset(MINUTE) ? 0 : date.getSeconds(),\n            should_reset(SECOND) ? 0 : date.getMilliseconds(),\n        ];\n\n        return new Date(...vals);\n    },\n\n    clone(date) {\n        return new Date(...this.get_date_values(date));\n    },\n\n    get_date_values(date) {\n        return [\n            date.getFullYear(),\n            date.getMonth(),\n            date.getDate(),\n            date.getHours(),\n            date.getMinutes(),\n            date.getSeconds(),\n            date.getMilliseconds(),\n        ];\n    },\n\n    get_days_in_month(date) {\n        const no_of_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n        const month = date.getMonth();\n\n        if (month !== 1) {\n            return no_of_days[month];\n        }\n\n        // Feb\n        const year = date.getFullYear();\n        if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {\n            return 29;\n        }\n        return 28;\n    },\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\nfunction padStart(str, targetLength, padString) {\n    str = str + '';\n    targetLength = targetLength >> 0;\n    padString = String(typeof padString !== 'undefined' ? padString : ' ');\n    if (str.length > targetLength) {\n        return String(str);\n    } else {\n        targetLength = targetLength - str.length;\n        if (targetLength > padString.length) {\n            padString += padString.repeat(targetLength / padString.length);\n        }\n        return padString.slice(0, targetLength) + String(str);\n    }\n}\n","export function $(expr, con) {\n    return typeof expr === 'string'\n        ? (con || document).querySelector(expr)\n        : expr || null;\n}\n\nexport function createSVG(tag, attrs) {\n    const elem = document.createElementNS('http://www.w3.org/2000/svg', tag);\n    for (let attr in attrs) {\n        if (attr === 'append_to') {\n            const parent = attrs.append_to;\n            parent.appendChild(elem);\n        } else if (attr === 'innerHTML') {\n            elem.innerHTML = attrs.innerHTML;\n        } else {\n            elem.setAttribute(attr, attrs[attr]);\n        }\n    }\n    return elem;\n}\n\nexport function animateSVG(svgElement, attr, from, to) {\n    const animatedSvgElement = getAnimationElement(svgElement, attr, from, to);\n\n    if (animatedSvgElement === svgElement) {\n        // triggered 2nd time programmatically\n        // trigger artificial click event\n        const event = document.createEvent('HTMLEvents');\n        event.initEvent('click', true, true);\n        event.eventName = 'click';\n        animatedSvgElement.dispatchEvent(event);\n    }\n}\n\nfunction getAnimationElement(\n    svgElement,\n    attr,\n    from,\n    to,\n    dur = '0.4s',\n    begin = '0.1s'\n) {\n    const animEl = svgElement.querySelector('animate');\n    if (animEl) {\n        $.attr(animEl, {\n            attributeName: attr,\n            from,\n            to,\n            dur,\n            begin: 'click + ' + begin, // artificial click\n        });\n        return svgElement;\n    }\n\n    const animateElement = createSVG('animate', {\n        attributeName: attr,\n        from,\n        to,\n        dur,\n        begin,\n        calcMode: 'spline',\n        values: from + ';' + to,\n        keyTimes: '0; 1',\n        keySplines: cubic_bezier('ease-out'),\n    });\n    svgElement.appendChild(animateElement);\n\n    return svgElement;\n}\n\nfunction cubic_bezier(name) {\n    return {\n        ease: '.25 .1 .25 1',\n        linear: '0 0 1 1',\n        'ease-in': '.42 0 1 1',\n        'ease-out': '0 0 .58 1',\n        'ease-in-out': '.42 0 .58 1',\n    }[name];\n}\n\n$.on = (element, event, selector, callback) => {\n    if (!callback) {\n        callback = selector;\n        $.bind(element, event, callback);\n    } else {\n        $.delegate(element, event, selector, callback);\n    }\n};\n\n$.off = (element, event, handler) => {\n    element.removeEventListener(event, handler);\n};\n\n$.bind = (element, event, callback) => {\n    event.split(/\\s+/).forEach(function (event) {\n        element.addEventListener(event, callback);\n    });\n};\n\n$.delegate = (element, event, selector, callback) => {\n    element.addEventListener(event, function (e) {\n        const delegatedTarget = e.target.closest(selector);\n        if (delegatedTarget) {\n            e.delegatedTarget = delegatedTarget;\n            callback.call(this, e, delegatedTarget);\n        }\n    });\n};\n\n$.closest = (selector, element) => {\n    if (!element) return null;\n\n    if (element.matches(selector)) {\n        return element;\n    }\n\n    return $.closest(selector, element.parentNode);\n};\n\n$.attr = (element, attr, value) => {\n    if (!value && typeof attr === 'string') {\n        return element.getAttribute(attr);\n    }\n\n    if (typeof attr === 'object') {\n        for (let key in attr) {\n            $.attr(element, key, attr[key]);\n        }\n        return;\n    }\n\n    element.setAttribute(attr, value);\n};\n","import date_utils from './date_utils';\nimport { $, createSVG, animateSVG } from './svg_utils';\n\nexport default class Bar {\n    constructor(gantt, task) {\n        this.set_defaults(gantt, task);\n        this.prepare();\n        this.draw();\n        this.bind();\n    }\n\n    pickColorBasedOnBG(bgColor) {\n        if (bgColor) {\n            const hex = bgColor.toString(16);\n            const color = bgColor.charAt(0) === '#' ? hex.substring(1, 7) : hex;\n            const r = parseInt(color.substring(0, 2), 16);\n            const g = parseInt(color.substring(2, 4), 16);\n            const b = parseInt(color.substring(4, 6), 16);\n            return r * 0.299 + g * 0.587 + b * 0.114 > 186 ? '#333' : '#f5f5f5';\n        } else {\n            return '#f5f5f5';\n        }\n    }\n\n    pickStripeColorBasedOnBG(bgColor) {\n        if (bgColor) {\n            const hex = bgColor.toString(16);\n            const color = bgColor.charAt(0) === '#' ? hex.substring(1, 7) : hex;\n            const r = parseInt(color.substring(0, 2), 16);\n            const g = parseInt(color.substring(2, 4), 16);\n            const b = parseInt(color.substring(4, 6), 16);\n            return r * 0.299 + g * 0.587 + b * 0.114 > 250\n                ? 'lightgrey'\n                : 'white';\n        } else {\n            return 'white';\n        }\n    }\n\n    set_defaults(gantt, task) {\n        this.action_completed = false;\n        this.gantt = gantt;\n        this.task = task;\n    }\n\n    prepare() {\n        this.prepare_values();\n        this.prepare_helpers();\n    }\n\n    prepare_values() {\n        this.invalid = this.task.invalid;\n        this.height = this.gantt.options.bar_height;\n        this.x = this.compute_x();\n        this.y = this.compute_y();\n        this.corner_radius = this.gantt.options.bar_corner_radius;\n        this.duration =\n            date_utils.diff(this.task._end, this.task._start, 'hour') /\n            this.gantt.options.step;\n        this.width = this.gantt.options.column_width * this.duration;\n        this.progress_width =\n            this.gantt.options.column_width *\n                this.duration *\n                (this.task.progress / 100) || 0;\n        this.group = createSVG('g', {\n            class: 'bar-wrapper ' + (this.task.custom_class || ''),\n            'data-id': this.task.id,\n        });\n        this.bar_group = createSVG('g', {\n            class: 'bar-group',\n            append_to: this.group,\n        });\n        this.handle_group = createSVG('g', {\n            class: 'handle-group',\n            append_to: this.group,\n        });\n    }\n\n    prepare_helpers() {\n        SVGElement.prototype.getX = function () {\n            return +this.getAttribute('x');\n        };\n        SVGElement.prototype.getY = function () {\n            return +this.getAttribute('y');\n        };\n        SVGElement.prototype.getWidth = function () {\n            return +this.getAttribute('width');\n        };\n        SVGElement.prototype.getHeight = function () {\n            return +this.getAttribute('height');\n        };\n        SVGElement.prototype.getEndX = function () {\n            return this.getX() + this.getWidth();\n        };\n    }\n\n    draw() {\n        this.draw_bar();\n        this.draw_carets();\n        this.draw_bar_pattern();\n        this.draw_progress_bar();\n        this.draw_label();\n        this.draw_resize_handles();\n    }\n\n    draw_bar_pattern() {\n        this.$bar = createSVG('rect', {\n            x: this.x,\n            y: this.y,\n            width: this.width,\n            height: this.height,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'bar-pattern',\n            append_to: this.bar_group,\n            style: 'fill: ' + this.pickStripeColorBasedOnBG(this.task.color),\n        });\n\n        animateSVG(this.$bar, 'width', 0, this.width);\n\n        if (this.invalid) {\n            this.$bar.classList.add('bar-invalid');\n        }\n    }\n\n    draw_bar() {\n        this.$bar = createSVG('rect', {\n            x: this.x,\n            y: this.y,\n            width: this.width,\n            height: this.height,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'bar',\n            append_to: this.bar_group,\n            style:\n                'fill: ' +\n                this.task.color +\n                '; stroke-width:1; stroke:lightgrey; ',\n        });\n\n        animateSVG(this.$bar, 'width', 0, this.width);\n\n        if (this.invalid) {\n            this.$bar.classList.add('bar-invalid');\n        }\n    }\n\n    draw_progress_bar() {\n        if (this.invalid) return;\n        this.$bar_progress = createSVG('rect', {\n            x: this.x,\n            y: this.y,\n            width: this.progress_width,\n            height: this.height,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'bar-progress',\n            append_to: this.bar_group,\n            style: 'fill: ' + this.task.color,\n        });\n\n        animateSVG(this.$bar_progress, 'width', 0, this.progress_width);\n    }\n\n    draw_label() {\n        createSVG('text', {\n            x: this.x + this.width / 2,\n            y: this.y + this.height / 2,\n            innerHTML: this.task.name,\n            class: 'bar-label',\n            append_to: this.bar_group,\n            style: 'fill: ' + this.pickColorBasedOnBG(this.task.color),\n        });\n        // labels get BBox in the next tick\n        requestAnimationFrame(() => this.update_label_position());\n    }\n\n    draw_resize_handles() {\n        if (this.invalid) return;\n\n        const bar = this.$bar;\n        const handle_width = 8;\n\n        createSVG('rect', {\n            x: bar.getX() + bar.getWidth() - 9,\n            y: bar.getY() + 1,\n            width: handle_width,\n            height: this.height - 2,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'handle right',\n            append_to: this.handle_group,\n        });\n\n        createSVG('rect', {\n            x: bar.getX() + 1,\n            y: bar.getY() + 1,\n            width: handle_width,\n            height: this.height - 2,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'handle left',\n            append_to: this.handle_group,\n        });\n\n        if (this.task.progress && this.task.progress < 100) {\n            this.$handle_progress = createSVG('polygon', {\n                points: this.get_progress_polygon_points().join(','),\n                class: 'handle progress',\n                append_to: this.handle_group,\n            });\n        }\n    }\n\n    draw_carets() {\n        const bar = this.$bar;\n        if (this.gantt.get_all_dependent_tasks(this.task.id).length != 0) {\n            const caretWidth = 12;\n            const caretHeight = 6;\n            const caretX = bar.getX() + bar.getWidth() - 20;\n            const caretY = bar.getY() + this.height / 2;\n\n            const caretPoints = [\n                `${caretX - caretWidth / 2},${caretY - caretHeight / 2}`,\n                `${caretX},${caretY + caretHeight / 2}`,\n                `${caretX + caretWidth / 2},${caretY - caretHeight / 2}`,\n            ];\n\n            createSVG('polygon', {\n                points: caretPoints.join(' '),\n                class: 'caret',\n                append_to: this.handle_group,\n            });\n        }\n    }\n\n    get_progress_polygon_points() {\n        const bar_progress = this.$bar_progress;\n        return [\n            bar_progress.getEndX() - 5,\n            bar_progress.getY() + bar_progress.getHeight(),\n            bar_progress.getEndX() + 5,\n            bar_progress.getY() + bar_progress.getHeight(),\n            bar_progress.getEndX(),\n            bar_progress.getY() + bar_progress.getHeight() - 8.66,\n        ];\n    }\n\n    bind() {\n        if (this.invalid) return;\n        this.setup_click_event();\n    }\n\n    setup_click_event() {\n        $.on(this.group, 'focus ' + this.gantt.options.popup_trigger, (e) => {\n            if (this.action_completed) {\n                // just finished a move action, wait for a few seconds\n                return;\n            }\n\n            this.show_popup();\n            this.gantt.unselect_all();\n            this.group.classList.add('active');\n        });\n\n        $.on(this.group, 'dblclick', (e) => {\n            if (this.action_completed) {\n                // just finished a move action, wait for a few seconds\n                return;\n            }\n\n            this.gantt.trigger_event('click', [this.task]);\n        });\n    }\n\n    show_popup() {\n        if (this.gantt.bar_being_dragged) return;\n\n        const start_date = date_utils.format(\n            this.task._start,\n            'MMM D',\n            this.gantt.options.language\n        );\n        const end_date = date_utils.format(\n            date_utils.add(this.task._end, -1, 'second'),\n            'MMM D',\n            this.gantt.options.language\n        );\n        const subtitle = start_date + ' - ' + end_date;\n\n        this.gantt.show_popup({\n            target_element: this.$bar,\n            title: this.task.name,\n            subtitle: subtitle,\n            task: this.task,\n        });\n    }\n\n    update_bar_position({ x = null, width = null, y = null }) {\n        const bar = this.$bar;\n        if (x) {\n            // get all x values of parent task\n            const xs = this.task.dependencies.map((dep) => {\n                return this.gantt.get_bar(dep).$bar.getX();\n            });\n            // child task must not go before parent\n            const valid_x = xs.reduce((prev, curr) => {\n                return x >= curr;\n            }, x);\n            if (!valid_x) {\n                width = null;\n                return;\n            }\n            this.update_attr(bar, 'x', x);\n        }\n        if (width && width >= this.gantt.options.column_width) {\n            this.update_attr(bar, 'width', width);\n        }\n        if (y) {\n            this.update_attr(bar, 'y', y);\n        }\n        this.update_label_position();\n        this.update_handle_position();\n        this.update_progressbar_position();\n        this.update_underlying_bar_position();\n        this.update_arrow_position();\n    }\n\n    date_changed() {\n        let changed = false;\n        const { new_start_date, new_end_date } = this.compute_start_end_date();\n\n        if (Number(this.task._start) !== Number(new_start_date)) {\n            changed = true;\n            this.task._start = new_start_date;\n        }\n\n        if (Number(this.task._end) !== Number(new_end_date)) {\n            changed = true;\n            this.task._end = new_end_date;\n        }\n\n        if (!changed) return;\n\n        this.gantt.trigger_event('date_change', [\n            this.task,\n            new_start_date,\n            date_utils.add(new_end_date, -1, 'second'),\n        ]);\n    }\n\n    progress_changed() {\n        const new_progress = this.compute_progress();\n        this.task.progress = new_progress;\n        this.gantt.trigger_event('progress_change', [this.task, new_progress]);\n    }\n\n    set_action_completed() {\n        this.action_completed = true;\n        setTimeout(() => (this.action_completed = false), 1000);\n    }\n\n    compute_start_end_date() {\n        const bar = this.$bar;\n        const x_in_units = bar.getX() / this.gantt.options.column_width;\n        const new_start_date = date_utils.add(\n            this.gantt.gantt_start,\n            x_in_units * this.gantt.options.step,\n            'hour'\n        );\n        const width_in_units = bar.getWidth() / this.gantt.options.column_width;\n        const new_end_date = date_utils.add(\n            new_start_date,\n            width_in_units * this.gantt.options.step,\n            'hour'\n        );\n\n        return { new_start_date, new_end_date };\n    }\n\n    compute_progress() {\n        const progress =\n            (this.$bar_progress.getWidth() / this.$bar.getWidth()) * 100;\n        return parseInt(progress, 10);\n    }\n\n    compute_x() {\n        const { step, column_width } = this.gantt.options;\n        const task_start = this.task._start;\n        const gantt_start = this.gantt.gantt_start;\n\n        const diff = date_utils.diff(task_start, gantt_start, 'hour');\n        let x = (diff / step) * column_width;\n\n        if (this.gantt.view_is('Month')) {\n            const diff = date_utils.diff(task_start, gantt_start, 'day');\n            x = (diff * column_width) / 30;\n        }\n        return x;\n    }\n\n    compute_y() {\n        return (\n            this.gantt.options.header_height +\n            this.gantt.options.padding +\n            this.task._index * (this.height + this.gantt.options.padding)\n        );\n    }\n\n    get_snap_position(dx) {\n        let odx = dx,\n            rem,\n            position;\n\n        if (this.gantt.view_is('Week')) {\n            rem = dx % (this.gantt.options.column_width / 7);\n            position =\n                odx -\n                rem +\n                (rem < this.gantt.options.column_width / 14\n                    ? 0\n                    : this.gantt.options.column_width / 7);\n        } else if (this.gantt.view_is('Month')) {\n            rem = dx % (this.gantt.options.column_width / 30);\n            position =\n                odx -\n                rem +\n                (rem < this.gantt.options.column_width / 60\n                    ? 0\n                    : this.gantt.options.column_width / 30);\n        } else {\n            rem = dx % this.gantt.options.column_width;\n            position =\n                odx -\n                rem +\n                (rem < this.gantt.options.column_width / 2\n                    ? 0\n                    : this.gantt.options.column_width);\n        }\n        return position;\n    }\n\n    update_attr(element, attr, value) {\n        value = +value;\n        if (!isNaN(value)) {\n            element.setAttribute(attr, value);\n        }\n        return element;\n    }\n\n    update_progressbar_position() {\n        if (this.invalid) return;\n        this.$bar_progress.setAttribute('x', this.$bar.getX());\n        this.$bar_progress.setAttribute('y', this.$bar.getY());\n        this.$bar_progress.setAttribute(\n            'width',\n            this.$bar.getWidth() * (this.task.progress / 100)\n        );\n    }\n\n    update_underlying_bar_position() {\n        const underBar = this.group.querySelector('.bar');\n\n        underBar.setAttribute('x', this.$bar.getX());\n        underBar.setAttribute('y', this.$bar.getY());\n        underBar.setAttribute('width', this.$bar.getWidth());\n    }\n\n    update_label_position() {\n        const bar = this.$bar,\n            label = this.group.querySelector('.bar-label');\n\n        if (label.getBBox().width > bar.getWidth()) {\n            label.classList.add('big');\n            label.setAttribute('x', bar.getX() + bar.getWidth() + 5);\n        } else {\n            label.classList.remove('big');\n            label.setAttribute('x', bar.getX() + bar.getWidth() / 2);\n        }\n        label.setAttribute('y', bar.getY() + bar.getHeight() / 2);\n    }\n\n    update_handle_position() {\n        if (this.invalid) return;\n        const bar = this.$bar;\n        this.handle_group\n            .querySelector('.handle.left')\n            .setAttribute('x', bar.getX() + 1);\n        this.handle_group\n            .querySelector('.handle.left')\n            .setAttribute('y', bar.getY() + 1);\n        this.handle_group\n            .querySelector('.handle.right')\n            .setAttribute('x', bar.getEndX() - 9);\n        this.handle_group\n            .querySelector('.handle.right')\n            .setAttribute('y', bar.getY() + 1);\n        if (this.handle_group.querySelector('.caret')) {\n            const caretElement = this.handle_group.querySelector('.caret');\n\n            const caretWidth = 12;\n            const caretHeight = 6;\n            const caretX = bar.getX() + bar.getWidth() - 20;\n            const caretY = bar.getY() + this.height / 2;\n\n            const caretPoints = [\n                `${caretX - caretWidth / 2},${caretY - caretHeight / 2}`,\n                `${caretX},${caretY + caretHeight / 2}`,\n                `${caretX + caretWidth / 2},${caretY - caretHeight / 2}`,\n            ];\n\n            caretElement.setAttribute('points', caretPoints.join(' '));\n        }\n        const handle = this.group.querySelector('.handle.progress');\n        handle &&\n            handle.setAttribute('points', this.get_progress_polygon_points());\n    }\n\n    update_arrow_position() {\n        this.arrows = this.arrows || [];\n        for (let arrow of this.arrows) {\n            arrow.update();\n        }\n    }\n}\n\nfunction isFunction(functionToCheck) {\n    var getType = {};\n    return (\n        functionToCheck &&\n        getType.toString.call(functionToCheck) === '[object Function]'\n    );\n}\n","import { createSVG } from './svg_utils';\n\nexport default class Arrow {\n    constructor(gantt, from_task, to_task) {\n        this.gantt = gantt;\n        this.from_task = from_task;\n        this.to_task = to_task;\n\n        this.calculate_path();\n        this.draw();\n    }\n\n    calculate_path() {\n        let start_x =\n            this.from_task.$bar.getX() + this.from_task.$bar.getWidth() / 2;\n\n        const condition = () =>\n            this.to_task.$bar.getX() < start_x + this.gantt.options.padding &&\n            start_x > this.from_task.$bar.getX() + this.gantt.options.padding;\n\n        while (condition()) {\n            start_x -= 10;\n        }\n\n        const start_y =\n            this.from_task.$bar.getY() + this.gantt.options.bar_height;\n\n        const end_x = this.to_task.$bar.getX() - this.gantt.options.padding / 2;\n        const end_y =\n            this.to_task.$bar.getY() + this.gantt.options.bar_height / 2;\n\n        const from_is_below_to =\n            this.from_task.$bar.getY() > this.to_task.$bar.getY();\n        const curve = this.gantt.options.arrow_curve;\n        const clockwise = from_is_below_to ? 1 : 0;\n        const curve_y = from_is_below_to ? -curve : curve;\n        const offset = from_is_below_to\n            ? end_y + this.gantt.options.arrow_curve\n            : end_y - this.gantt.options.arrow_curve;\n\n        this.path = `\n            M ${start_x} ${start_y}\n            V ${offset}\n            a ${curve} ${curve} 0 0 ${clockwise} ${curve} ${curve_y}\n            L ${end_x} ${end_y}\n            m -5 -5\n            l 5 5\n            l -5 5`;\n\n        if (\n            this.to_task.$bar.getX() <\n            this.from_task.$bar.getX() + this.gantt.options.padding\n        ) {\n            const down_1 = this.gantt.options.padding / 2 - curve;\n            const down_2 =\n                this.to_task.$bar.getY() +\n                this.to_task.$bar.getHeight() / 2 -\n                curve_y;\n            const left = this.to_task.$bar.getX() - this.gantt.options.padding;\n\n            this.path = `\n                M ${start_x} ${start_y}\n                v ${down_1}\n                a ${curve} ${curve} 0 0 1 -${curve} ${curve}\n                H ${left}\n                a ${curve} ${curve} 0 0 ${clockwise} -${curve} ${curve_y}\n                V ${down_2}\n                a ${curve} ${curve} 0 0 ${clockwise} ${curve} ${curve_y}\n                L ${end_x} ${end_y}\n                m -5 -5\n                l 5 5\n                l -5 5`;\n        }\n    }\n\n    draw() {\n        this.element = createSVG('path', {\n            d: this.path,\n            'data-from': this.from_task.task.id,\n            'data-to': this.to_task.task.id,\n        });\n    }\n\n    update() {\n        this.calculate_path();\n        this.element.setAttribute('d', this.path);\n    }\n}\n","export default class Popup {\n    constructor(parent, custom_html) {\n        this.parent = parent;\n        this.custom_html = custom_html;\n        this.make();\n    }\n\n    make() {\n        this.parent.innerHTML = `\n            <div class=\"title\"></div>\n            <div class=\"subtitle\"></div>\n            <div class=\"pointer\"></div>\n        `;\n\n        this.hide();\n\n        this.title = this.parent.querySelector('.title');\n        this.subtitle = this.parent.querySelector('.subtitle');\n        this.pointer = this.parent.querySelector('.pointer');\n    }\n\n    show(options) {\n        if (!options.target_element) {\n            throw new Error('target_element is required to show popup');\n        }\n        if (!options.position) {\n            options.position = 'left';\n        }\n        const target_element = options.target_element;\n\n        if (this.custom_html) {\n            let html = this.custom_html(options.task);\n            html += '<div class=\"pointer\"></div>';\n            this.parent.innerHTML = html;\n            this.pointer = this.parent.querySelector('.pointer');\n        } else {\n            // set data\n            this.title.innerHTML = options.title;\n            this.subtitle.innerHTML = options.subtitle;\n            this.parent.style.width = this.parent.clientWidth + 'px';\n        }\n\n        // set position\n        let position_meta;\n        if (target_element instanceof HTMLElement) {\n            position_meta = target_element.getBoundingClientRect();\n        } else if (target_element instanceof SVGElement) {\n            position_meta = options.target_element.getBBox();\n        }\n\n        if (options.position === 'left') {\n            this.parent.style.left =\n                position_meta.x + (position_meta.width + 10) + 'px';\n            this.parent.style.top = position_meta.y + 'px';\n\n            this.pointer.style.transform = 'rotateZ(90deg)';\n            this.pointer.style.left = '-7px';\n            this.pointer.style.top = '2px';\n        }\n\n        // show\n        this.parent.style.opacity = 1;\n    }\n\n    hide() {\n        this.parent.style.opacity = 0;\n        this.parent.style.left = 0;\n    }\n}\n","import date_utils from './date_utils';\nimport { $, createSVG } from './svg_utils';\nimport Bar from './bar';\nimport Arrow from './arrow';\nimport Popup from './popup';\nimport './gantt.scss';\n\nconst VIEW_MODE = {\n    QUARTER_DAY: 'Quarter Day',\n    HALF_DAY: 'Half Day',\n    DAY: 'Day',\n    WEEK: 'Week',\n    MONTH: 'Month',\n    YEAR: 'Year',\n};\n\nexport default class Gantt {\n    constructor(wrapper, tasks, options) {\n        this.setup_wrapper(wrapper);\n        this.setup_options(options);\n        this.setup_tasks(tasks);\n        // initialize with default view mode\n        this.change_view_mode();\n        this.bind_events();\n    }\n\n    setup_wrapper(element) {\n        let svg_element, wrapper_element;\n\n        // CSS Selector is passed\n        if (typeof element === 'string') {\n            element = document.querySelector(element);\n        }\n\n        // get the SVGElement\n        if (element instanceof HTMLElement) {\n            wrapper_element = element;\n            svg_element = element.querySelector('svg');\n        } else if (element instanceof SVGElement) {\n            svg_element = element;\n        } else {\n            throw new TypeError(\n                'Frappé Gantt only supports usage of a string CSS selector,' +\n                    \" HTML DOM element or SVG DOM element for the 'element' parameter\"\n            );\n        }\n\n        // svg element\n        if (!svg_element) {\n            // create it\n            this.$svg = createSVG('svg', {\n                append_to: wrapper_element,\n                class: 'gantt',\n            });\n        } else {\n            this.$svg = svg_element;\n            this.$svg.classList.add('gantt');\n        }\n\n        // wrapper element\n        this.$container = document.createElement('div');\n        this.$container.classList.add('gantt-container');\n\n        const parent_element = this.$svg.parentElement;\n        parent_element.appendChild(this.$container);\n        this.$container.appendChild(this.$svg);\n\n        // popup wrapper\n        this.popup_wrapper = document.createElement('div');\n        this.popup_wrapper.classList.add('popup-wrapper');\n        this.$container.appendChild(this.popup_wrapper);\n    }\n\n    setup_options(options) {\n        const default_options = {\n            header_height: 50,\n            column_width: 30,\n            step: 24,\n            view_modes: [...Object.values(VIEW_MODE)],\n            bar_height: 20,\n            bar_corner_radius: 3,\n            arrow_curve: 5,\n            padding: 18,\n            view_mode: 'Day',\n            date_format: 'YYYY-MM-DD',\n            popup_trigger: 'click',\n            custom_popup_html: null,\n            language: 'en',\n            sortable: 'false',\n        };\n        this.options = Object.assign({}, default_options, options);\n    }\n\n    setup_tasks(tasks) {\n        this.originalTasks = [];\n        this.originalTasks = tasks;\n\n        const visibleTasks = this.originalTasks.filter(\n            (task) => task.visible || task.visible === undefined\n        );\n\n        this.tasks = visibleTasks.map((task, i) => {\n            task._start = date_utils.parse(task.start);\n            task._end = date_utils.parse(task.end);\n\n            if (date_utils.diff(task._end, task._start, 'year') > 10) {\n                task.end = null;\n            }\n\n            // cache index\n            task._index = i;\n\n            // invalid dates\n            if (!task.start && !task.end) {\n                const today = date_utils.today();\n                task._start = today;\n                task._end = date_utils.add(today, 2, 'day');\n            }\n\n            if (!task.start && task.end) {\n                task._start = date_utils.add(task._end, -2, 'day');\n            }\n\n            if (task.start && !task.end) {\n                task._end = date_utils.add(task._start, 2, 'day');\n            }\n\n            // if hours is not set, assume the last day is full day\n            // e.g: 2018-09-09 becomes 2018-09-09 23:59:59\n            const task_end_values = date_utils.get_date_values(task._end);\n            if (task_end_values.slice(3).every((d) => d === 0)) {\n                task._end = date_utils.add(task._end, 24, 'hour');\n            }\n\n            // invalid flag\n            if (!task.start || !task.end) {\n                task.invalid = true;\n            }\n\n            // dependencies\n            if (typeof task.dependencies === 'string' || !task.dependencies) {\n                let deps = [];\n                if (task.dependencies) {\n                    deps = task.dependencies\n                        .split(',')\n                        .map((d) => d.trim())\n                        .filter((d) => d);\n                }\n                task.dependencies = deps;\n            }\n\n            // uids\n            if (!task.id) {\n                task.id = generate_id(task);\n            }\n\n            return task;\n        });\n\n        this.setup_dependencies();\n        this.setup_ancestors();\n    }\n\n    updateTaskVisibility(task, visibility) {\n        console.log(task);\n        task.visible = visibility;\n\n        // Also update visibility in the original tasks array\n        const originalTask = this.originalTasks.find((t) => t.id === task.id);\n        if (originalTask) {\n            originalTask.visible = visibility;\n        }\n    }\n\n    setup_dependencies() {\n        this.dependency_map = {};\n        for (let t of this.tasks) {\n            for (let d of t.dependencies) {\n                this.dependency_map[d] = this.dependency_map[d] || [];\n                this.dependency_map[d].push(t.id);\n            }\n        }\n    }\n\n    //make a map of tasks to their reverse dependencies with ancestors\n    setup_ancestors() {\n        this.ancestor_map = {};\n        for (let t of this.tasks) {\n            for (let d of t.dependencies) {\n                this.ancestor_map[t.id] = this.ancestor_map[t.id] || [];\n                this.ancestor_map[t.id].push(d);\n                if (this.ancestor_map[d]) {\n                    this.ancestor_map[t.id] = this.ancestor_map[t.id].concat(\n                        this.ancestor_map[d]\n                    );\n                }\n            }\n        }\n    }\n\n    refresh(tasks) {\n        this.setup_tasks(tasks);\n        this.change_view_mode();\n    }\n\n    change_view_mode(mode = this.options.view_mode) {\n        this.update_view_scale(mode);\n        this.setup_dates();\n        this.render();\n        // fire viewmode_change event\n        this.trigger_event('view_change', [mode]);\n    }\n\n    update_view_scale(view_mode) {\n        this.options.view_mode = view_mode;\n\n        if (view_mode === VIEW_MODE.DAY) {\n            this.options.step = 24;\n            this.options.column_width = 38;\n        } else if (view_mode === VIEW_MODE.HALF_DAY) {\n            this.options.step = 24 / 2;\n            this.options.column_width = 38;\n        } else if (view_mode === VIEW_MODE.QUARTER_DAY) {\n            this.options.step = 24 / 4;\n            this.options.column_width = 38;\n        } else if (view_mode === VIEW_MODE.WEEK) {\n            this.options.step = 24 * 7;\n            this.options.column_width = 140;\n        } else if (view_mode === VIEW_MODE.MONTH) {\n            this.options.step = 24 * 30;\n            this.options.column_width = 120;\n        } else if (view_mode === VIEW_MODE.YEAR) {\n            this.options.step = 24 * 365;\n            this.options.column_width = 120;\n        }\n    }\n\n    scale_view_mode(zoomValue) {\n        if (zoomValue > 0 && this.options.column_width < 120) {\n            this.options.column_width += 2 * zoomValue;\n            this.render();\n        } else if (zoomValue < 0 && this.options.column_width > 15) {\n            this.options.column_width += 2 * zoomValue;\n            this.render();\n        }\n    }\n\n    setup_dates() {\n        this.setup_gantt_dates();\n        this.setup_date_values();\n    }\n\n    setup_gantt_dates() {\n        this.gantt_start = this.gantt_end = null;\n\n        for (let task of this.tasks) {\n            // set global start and end date\n            if (!this.gantt_start || task._start < this.gantt_start) {\n                this.gantt_start = task._start;\n            }\n            if (!this.gantt_end || task._end > this.gantt_end) {\n                this.gantt_end = task._end;\n            }\n        }\n\n        this.gantt_start = date_utils.start_of(this.gantt_start, 'day');\n        this.gantt_end = date_utils.start_of(this.gantt_end, 'day');\n\n        // add date padding on both sides\n        if (this.view_is([VIEW_MODE.QUARTER_DAY, VIEW_MODE.HALF_DAY])) {\n            this.gantt_start = date_utils.add(this.gantt_start, -7, 'day');\n            this.gantt_end = date_utils.add(this.gantt_end, 7, 'day');\n        } else if (this.view_is(VIEW_MODE.MONTH)) {\n            this.gantt_start = date_utils.add(this.gantt_start, -2, 'year');\n            this.gantt_end = date_utils.add(this.gantt_end, 2, 'year');\n        } else if (this.view_is(VIEW_MODE.YEAR)) {\n            this.gantt_start = date_utils.add(this.gantt_start, -2, 'year');\n            this.gantt_end = date_utils.add(this.gantt_end, 2, 'year');\n        } else {\n            this.gantt_start = date_utils.add(this.gantt_start, -2, 'month');\n            this.gantt_end = date_utils.add(this.gantt_end, 2, 'month');\n        }\n    }\n\n    setup_date_values() {\n        this.dates = [];\n        let cur_date = null;\n\n        while (cur_date === null || cur_date < this.gantt_end) {\n            if (!cur_date) {\n                cur_date = date_utils.clone(this.gantt_start);\n            } else {\n                if (this.view_is(VIEW_MODE.YEAR)) {\n                    cur_date = date_utils.add(cur_date, 1, 'year');\n                } else if (this.view_is(VIEW_MODE.MONTH)) {\n                    cur_date = date_utils.add(cur_date, 1, 'month');\n                } else {\n                    cur_date = date_utils.add(\n                        cur_date,\n                        this.options.step,\n                        'hour'\n                    );\n                }\n            }\n            this.dates.push(cur_date);\n        }\n    }\n\n    bind_events() {\n        this.bind_grid_click();\n        this.bind_bar_events();\n    }\n\n    render() {\n        this.clear();\n\n        this.setup_layers();\n        this.make_grid();\n        this.make_dates();\n        this.make_bars();\n        this.make_arrows();\n        this.map_arrows_on_bars();\n        this.set_width();\n        this.set_scroll_position();\n    }\n\n    setup_layers() {\n        this.layers = {};\n        const layers = ['grid', 'arrow', 'progress', 'bar', 'details', 'date'];\n        // make group layers\n        for (let layer of layers) {\n            this.layers[layer] = createSVG('g', {\n                class: layer,\n                append_to: this.$svg,\n            });\n        }\n    }\n\n    make_grid() {\n        this.make_grid_background();\n        this.make_grid_rows();\n        this.make_grid_header();\n        this.make_grid_ticks();\n        this.make_grid_highlights();\n    }\n\n    make_grid_background() {\n        const grid_width = this.dates.length * this.options.column_width;\n        const grid_height =\n            this.options.header_height +\n            this.options.padding +\n            (this.options.bar_height + this.options.padding) *\n                this.tasks.length;\n\n        createSVG('rect', {\n            x: 0,\n            y: 0,\n            width: grid_width,\n            height: grid_height,\n            class: 'grid-background',\n            append_to: this.layers.grid,\n        });\n\n        $.attr(this.$svg, {\n            height: grid_height + this.options.padding + 100,\n            width: '100%',\n        });\n    }\n\n    make_grid_rows() {\n        const rows_layer = createSVG('g', { append_to: this.layers.grid });\n        const lines_layer = createSVG('g', { append_to: this.layers.grid });\n\n        const row_width = this.dates.length * this.options.column_width;\n        const row_height = this.options.bar_height + this.options.padding;\n\n        let row_y = this.options.header_height + this.options.padding / 2;\n\n        for (let task of this.tasks) {\n            createSVG('rect', {\n                x: 0,\n                y: row_y,\n                width: row_width,\n                height: row_height,\n                class: 'grid-row',\n                append_to: rows_layer,\n            });\n\n            createSVG('line', {\n                x1: 0,\n                y1: row_y + row_height,\n                x2: row_width,\n                y2: row_y + row_height,\n                class: 'row-line',\n                append_to: lines_layer,\n            });\n\n            row_y += this.options.bar_height + this.options.padding;\n        }\n    }\n\n    make_grid_header() {\n        const header_width = this.dates.length * this.options.column_width;\n        const header_height = this.options.header_height + 10;\n        createSVG('rect', {\n            x: 0,\n            y: 0,\n            width: header_width,\n            height: header_height,\n            class: 'grid-header',\n            append_to: this.layers.date,\n        });\n    }\n\n    make_grid_ticks() {\n        let tick_x = 0;\n        let tick_y = this.options.header_height + this.options.padding / 2;\n        let tick_height =\n            (this.options.bar_height + this.options.padding) *\n            this.tasks.length;\n\n        for (let date of this.dates) {\n            let tick_class = 'tick';\n            // thick tick for monday\n            if (this.view_is(VIEW_MODE.DAY) && date.getDate() === 1) {\n                tick_class += ' thick';\n            }\n            // thick tick for first week\n            if (\n                this.view_is(VIEW_MODE.WEEK) &&\n                date.getDate() >= 1 &&\n                date.getDate() < 8\n            ) {\n                tick_class += ' thick';\n            }\n            // thick ticks for quarters\n            if (this.view_is(VIEW_MODE.MONTH) && date.getMonth() % 3 === 0) {\n                tick_class += ' thick';\n            }\n\n            createSVG('path', {\n                d: `M ${tick_x} ${tick_y} v ${tick_height}`,\n                class: tick_class,\n                append_to: this.layers.grid,\n            });\n\n            if (this.view_is(VIEW_MODE.MONTH)) {\n                tick_x +=\n                    (date_utils.get_days_in_month(date) *\n                        this.options.column_width) /\n                    30;\n            } else {\n                tick_x += this.options.column_width;\n            }\n        }\n    }\n\n    make_grid_highlights() {\n        // highlight today's date\n        if (this.view_is(VIEW_MODE.DAY)) {\n            const x =\n                (date_utils.diff(date_utils.today(), this.gantt_start, 'hour') /\n                    this.options.step) *\n                this.options.column_width;\n            const y = 0;\n\n            const width = this.options.column_width;\n            const height =\n                (this.options.bar_height + this.options.padding) *\n                    this.tasks.length +\n                this.options.header_height +\n                this.options.padding / 2;\n\n            createSVG('rect', {\n                x,\n                y,\n                width,\n                height,\n                class: 'today-highlight',\n                append_to: this.layers.grid,\n            });\n        }\n    }\n\n    make_dates() {\n        for (let date of this.get_dates_to_draw()) {\n            createSVG('text', {\n                x: date.lower_x,\n                y: date.lower_y,\n                innerHTML: date.lower_text,\n                class: 'lower-text',\n                append_to: this.layers.date,\n            });\n\n            if (date.upper_text) {\n                const $upper_text = createSVG('text', {\n                    x: date.upper_x,\n                    y: date.upper_y,\n                    innerHTML: date.upper_text,\n                    class: 'upper-text',\n                    append_to: this.layers.date,\n                });\n\n                // remove out-of-bound dates\n                if (\n                    $upper_text.getBBox().x2 > this.layers.grid.getBBox().width\n                ) {\n                    $upper_text.remove();\n                }\n            }\n        }\n    }\n\n    get_dates_to_draw() {\n        let last_date = null;\n        const dates = this.dates.map((date, i) => {\n            const d = this.get_date_info(date, last_date, i);\n            last_date = date;\n            return d;\n        });\n        return dates;\n    }\n\n    get_date_info(date, last_date, i) {\n        if (!last_date) {\n            last_date = date_utils.add(date, 1, 'year');\n        }\n        const date_text = {\n            'Quarter Day_lower': date_utils.format(\n                date,\n                'HH',\n                this.options.language\n            ),\n            'Half Day_lower': date_utils.format(\n                date,\n                'HH',\n                this.options.language\n            ),\n            Day_lower:\n                date.getDate() !== last_date.getDate()\n                    ? date_utils.format(date, 'D', this.options.language)\n                    : '',\n            Week_lower:\n                date.getMonth() !== last_date.getMonth()\n                    ? date_utils.format(date, 'D MMM', this.options.language)\n                    : date_utils.format(date, 'D', this.options.language),\n            Month_lower: date_utils.format(date, 'MMMM', this.options.language),\n            Year_lower: date_utils.format(date, 'YYYY', this.options.language),\n            'Quarter Day_upper':\n                date.getDate() !== last_date.getDate()\n                    ? date_utils.format(date, 'D MMM', this.options.language)\n                    : '',\n            'Half Day_upper':\n                date.getDate() !== last_date.getDate()\n                    ? date.getMonth() !== last_date.getMonth()\n                        ? date_utils.format(\n                              date,\n                              'D MMM',\n                              this.options.language\n                          )\n                        : date_utils.format(date, 'D', this.options.language)\n                    : '',\n            Day_upper:\n                date.getMonth() !== last_date.getMonth()\n                    ? date_utils.format(date, 'MMMM', this.options.language)\n                    : '',\n            Week_upper:\n                date.getMonth() !== last_date.getMonth()\n                    ? date_utils.format(date, 'MMMM', this.options.language)\n                    : '',\n            Month_upper:\n                date.getFullYear() !== last_date.getFullYear()\n                    ? date_utils.format(date, 'YYYY', this.options.language)\n                    : '',\n            Year_upper:\n                date.getFullYear() !== last_date.getFullYear()\n                    ? date_utils.format(date, 'YYYY', this.options.language)\n                    : '',\n        };\n\n        const base_pos = {\n            x: i * this.options.column_width,\n            lower_y: this.options.header_height,\n            upper_y: this.options.header_height - 25,\n        };\n\n        const x_pos = {\n            'Quarter Day_lower': (this.options.column_width * 4) / 2,\n            'Quarter Day_upper': 0,\n            'Half Day_lower': (this.options.column_width * 2) / 2,\n            'Half Day_upper': 0,\n            Day_lower: this.options.column_width / 2,\n            Day_upper: (this.options.column_width * 30) / 2,\n            Week_lower: 0,\n            Week_upper: (this.options.column_width * 4) / 2,\n            Month_lower: this.options.column_width / 2,\n            Month_upper: (this.options.column_width * 12) / 2,\n            Year_lower: this.options.column_width / 2,\n            Year_upper: (this.options.column_width * 30) / 2,\n        };\n\n        return {\n            upper_text: date_text[`${this.options.view_mode}_upper`],\n            lower_text: date_text[`${this.options.view_mode}_lower`],\n            upper_x: base_pos.x + x_pos[`${this.options.view_mode}_upper`],\n            upper_y: base_pos.upper_y,\n            lower_x: base_pos.x + x_pos[`${this.options.view_mode}_lower`],\n            lower_y: base_pos.lower_y,\n        };\n    }\n\n    make_bars() {\n        this.bars = this.tasks.map((task) => {\n            const bar = new Bar(this, task);\n            this.layers.bar.appendChild(bar.group);\n            return bar;\n        });\n    }\n\n    make_arrows() {\n        this.arrows = [];\n        for (let task of this.tasks) {\n            let arrows = [];\n            arrows = task.dependencies\n                .map((task_id) => {\n                    const dependency = this.get_task(task_id);\n                    if (!dependency) return;\n                    const arrow = new Arrow(\n                        this,\n                        this.bars[dependency._index], // from_task\n                        this.bars[task._index] // to_task\n                    );\n                    this.layers.arrow.appendChild(arrow.element);\n                    return arrow;\n                })\n                .filter(Boolean); // filter falsy values\n            this.arrows = this.arrows.concat(arrows);\n        }\n    }\n\n    map_arrows_on_bars() {\n        for (let bar of this.bars) {\n            bar.arrows = this.arrows.filter((arrow) => {\n                return (\n                    arrow.from_task.task.id === bar.task.id ||\n                    arrow.to_task.task.id === bar.task.id\n                );\n            });\n        }\n    }\n\n    set_width() {\n        const cur_width = this.$svg.getBoundingClientRect().width;\n        const actual_width = this.$svg\n            .querySelector('.grid .grid-row')\n            .getAttribute('width');\n        if (cur_width < actual_width) {\n            this.$svg.setAttribute('width', actual_width);\n        }\n    }\n\n    set_scroll_position() {\n        const parent_element = this.$svg.parentElement;\n        if (!parent_element) return;\n\n        const hours_before_first_task = date_utils.diff(\n            this.get_oldest_starting_date(),\n            this.gantt_start,\n            'hour'\n        );\n\n        const scroll_pos =\n            (hours_before_first_task / this.options.step) *\n                this.options.column_width -\n            this.options.column_width;\n\n        parent_element.scrollLeft = scroll_pos;\n    }\n\n    bind_grid_click() {\n        // add\n        let is_dragging = false;\n        let x_on_start = 0;\n        // ...\n        $.on(\n            this.$svg,\n            this.options.popup_trigger,\n            '.grid-row, .grid-header',\n            () => {\n                this.unselect_all();\n                this.hide_popup();\n            }\n        );\n        // add\n        $.on(this.$svg, 'mousedown', '.grid-row, .today-highlight', (e) => {\n            is_dragging = true;\n            x_on_start = e.offsetX;\n            if (this.$svg.parentElement) {\n                this.$svg.parentElement.style.cursor = 'move';\n            }\n        });\n        $.on(this.$svg, 'mousemove', '.grid-row, .today-highlight', (e) => {\n            if (!is_dragging) {\n                return;\n            }\n            const dx = e.offsetX - x_on_start;\n            const parent_element = this.$svg.parentElement;\n            if (!parent_element) return;\n            parent_element.style.cursor = 'move';\n            parent_element.scrollLeft -= dx * 1.5;\n            x_on_start = e.offsetX;\n        });\n\n        document.addEventListener('mouseup', (e) => {\n            if (this.$svg.parentElement) {\n                this.$svg.parentElement.style.cursor = 'default';\n            }\n            is_dragging = false;\n            x_on_start = 0;\n        });\n        // ...\n    }\n\n    sort_bars() {\n        const changed_bars = [];\n        if (!this.bars) {\n            return changed_bars;\n        }\n        this.bars = this.bars.sort((b0, b1) => {\n            return b0.$bar.getY() - b1.$bar.getY();\n        });\n\n        this.tasks = this.bars.map((b, i) => {\n            const task = b.task;\n            if (task._index !== i) {\n                changed_bars.push(b);\n            }\n            task._index = i;\n            return task;\n        });\n        return changed_bars;\n    }\n\n    bind_bar_events() {\n        let is_dragging = false;\n        let x_on_start = 0;\n        let y_on_start = 0;\n        let is_resizing_left = false;\n        let is_resizing_right = false;\n        let parent_bar_id = null;\n        let bars = []; // instanceof Bars, the dragged bar and its children\n        let parent_bars = [];\n        const min_y = this.options.header_height;\n        const max_y =\n            this.options.header_height +\n            this.tasks.length *\n                (this.options.bar_height + this.options.padding);\n        this.bar_being_dragged = null; // instanceof dragged bar\n\n        function action_in_progress() {\n            return is_dragging || is_resizing_left || is_resizing_right;\n        }\n        // Event listener for clicking on a caret\n        $.on(this.$svg, 'click', '.caret', (e, caretElement) => {\n            console.log('caret clicked');\n            const parentBarWrapper = caretElement.closest('.bar-wrapper');\n            if (parentBarWrapper) {\n                const parentTaskId = parentBarWrapper.getAttribute('data-id');\n\n                const dependentTasks =\n                    this.get_all_dependent_tasks(parentTaskId);\n\n                dependentTasks.forEach((taskId) => {\n                    const dependentBar = this.get_bar(taskId);\n                    console.log(dependentBar);\n                    if (dependentBar) {\n                        dependentBar.group.classList.toggle('collapsed');\n\n                        const matchingArrows = document.querySelectorAll(\n                            `[data-from=\"${parentTaskId}\"][data-to=\"${taskId}\"],` +\n                                `[data-from=\"${taskId}\"][data-to=\"${parentTaskId}\"]`\n                        );\n                        matchingArrows.forEach((arrow) => {\n                            arrow.classList.toggle('collapsed');\n                        });\n                        console.log(matchingArrows);\n\n                        // Hide all children's arrows\n                        const childrenTasks =\n                            this.get_all_dependent_tasks(taskId);\n                        childrenTasks.forEach((childTaskId) => {\n                            const childMatchingArrows =\n                                document.querySelectorAll(\n                                    `[data-from=\"${taskId}\"][data-to=\"${childTaskId}\"],` +\n                                        `[data-from=\"${childTaskId}\"][data-to=\"${taskId}\"]`\n                                );\n                            childMatchingArrows.forEach((childArrow) => {\n                                childArrow.classList.toggle('collapsed');\n                            });\n                        });\n                    }\n                });\n            }\n        });\n\n        $.on(this.$svg, 'mousedown', '.bar-wrapper, .handle', (e, element) => {\n            const bar_wrapper = $.closest('.bar-wrapper', element);\n\n            if (element.classList.contains('left')) {\n                is_resizing_left = true;\n            } else if (element.classList.contains('right')) {\n                is_resizing_right = true;\n            } else if (element.classList.contains('bar-wrapper')) {\n                is_dragging = true;\n            }\n\n            bar_wrapper.classList.add('active');\n\n            x_on_start = e.offsetX;\n            y_on_start = e.offsetY;\n\n            parent_bar_id = bar_wrapper.getAttribute('data-id');\n            const ids = [\n                parent_bar_id,\n                ...this.get_all_dependent_tasks(parent_bar_id),\n            ];\n            bars = ids.map((id) => {\n                const bar = this.get_bar(id);\n                if (parent_bar_id === id) {\n                    this.bar_being_dragged = bar;\n                }\n                const $bar = bar.$bar;\n                $bar.ox = $bar.getX();\n                $bar.oy = $bar.getY();\n                $bar.owidth = $bar.getWidth();\n                $bar.finaldx = 0;\n                $bar.finaldy = 0;\n                return bar;\n            });\n            parent_bars = this.get_all_parent_tasks(parent_bar_id).map(\n                (bar) => {\n                    const $bar = bar.$bar;\n                    $bar.ox = $bar.getX();\n                    $bar.oy = $bar.getY();\n                    $bar.owidth = $bar.getWidth();\n                    $bar.finaldx = 0;\n                    $bar.finaldy = 0;\n                    return bar;\n                }\n            );\n        });\n\n        $.on(this.$svg, 'mousemove', (e) => {\n            if (!action_in_progress()) return;\n            const dx = e.offsetX - x_on_start;\n            const dy = e.offsetY - y_on_start;\n\n            this.hide_popup();\n\n            // update the dragged bar\n            const bar_being_dragged = this.bar_being_dragged;\n            bar_being_dragged.$bar.finaldx = this.get_snap_position(dx);\n            if (is_resizing_left) {\n                bar_being_dragged.update_bar_position({\n                    x:\n                        bar_being_dragged.$bar.ox +\n                        bar_being_dragged.$bar.finaldx,\n                    width:\n                        bar_being_dragged.$bar.owidth -\n                        bar_being_dragged.$bar.finaldx,\n                });\n            } else if (is_resizing_right) {\n                bar_being_dragged.update_bar_position({\n                    width:\n                        bar_being_dragged.$bar.owidth +\n                        bar_being_dragged.$bar.finaldx,\n                });\n            } else if (is_dragging) {\n                let y = bar_being_dragged.$bar.oy + dy;\n                if (y < min_y) {\n                    y = min_y;\n                } else if (y > max_y) {\n                    y = max_y;\n                }\n                bar_being_dragged.update_bar_position({\n                    x:\n                        bar_being_dragged.$bar.ox +\n                        bar_being_dragged.$bar.finaldx,\n                    y: this.options.sortable ? y : null,\n                });\n            }\n\n            // update project and tag bars when resizing or moving children\n            parent_bars.forEach((ancestor_bar) => {\n                if (\n                    ancestor_bar.task.type == 'project' ||\n                    ancestor_bar.task.type == 'tag'\n                ) {\n                    let max_x = 0;\n                    let second_x = 0;\n                    this.get_all_dependent_tasks(ancestor_bar.task.id).forEach(\n                        (bar_id) => {\n                            const bar = this.get_bar(bar_id);\n\n                            if (bar.x + bar.width > max_x) {\n                                second_x = max_x;\n                                max_x = bar.x + bar.width;\n                            } else if (bar.x + bar.width > second_x) {\n                                second_x = bar.x + bar.width;\n                            }\n                        }\n                    );\n\n                    if (\n                        ancestor_bar.x +\n                            ancestor_bar.width +\n                            bar_being_dragged.$bar.finaldx >=\n                            max_x ||\n                        (bar_being_dragged.$bar.ox >= ancestor_bar.x &&\n                            bar_being_dragged.$bar.finaldx +\n                                bar_being_dragged.$bar.ox +\n                                bar_being_dragged.$bar.owidth >=\n                                second_x)\n                    ) {\n                        ancestor_bar.update_bar_position({\n                            width:\n                                ancestor_bar.width +\n                                bar_being_dragged.$bar.finaldx,\n                        });\n                    }\n                }\n            });\n\n            // update children\n            bars.forEach((bar) => {\n                if (bar.task.id === parent_bar_id) {\n                    return;\n                }\n                const $bar = bar.$bar;\n                $bar.finaldx = this.get_snap_position(dx);\n                this.hide_popup();\n                if (is_resizing_left) {\n                    bar.update_bar_position({\n                        x: $bar.ox + $bar.finaldx,\n                    });\n                } else if (is_dragging) {\n                    bar.update_bar_position({\n                        x: $bar.ox + $bar.finaldx,\n                    });\n                }\n            });\n\n            // update y pos\n            if (\n                this.options.sortable &&\n                is_dragging &&\n                Math.abs(dy - bar_being_dragged.$bar.finaldy) >\n                    bar_being_dragged.height\n            ) {\n                this.sort_bars().map((bar) => {\n                    const y = bar.compute_y();\n                    if (bar.task.id === parent_bar_id) {\n                        bar.$bar.finaldy = y - bar.$bar.oy;\n                        return;\n                    }\n                    bar.date_changed();\n                    bar.update_bar_position({ y: y });\n                });\n            }\n        });\n\n        document.addEventListener('mouseup', (e) => {\n            const dy = e.offsetY - y_on_start;\n            if (is_dragging || is_resizing_left || is_resizing_right) {\n                bars.forEach((bar) => {\n                    bar.group.classList.remove('active');\n\n                    const $bar = bar.$bar;\n                    if ($bar.finaldx) {\n                        bar.date_changed();\n                        bar.set_action_completed();\n                    }\n                });\n                const $bar = this.bar_being_dragged.$bar;\n                if (this.options.sortable && dy !== $bar.finaldy) {\n                    this.bar_being_dragged.update_bar_position({\n                        y: $bar.oy + $bar.finaldy,\n                    });\n                    this.bar_being_dragged.date_changed();\n                }\n            }\n\n            this.bar_being_dragged = null;\n            is_dragging = false;\n            is_resizing_left = false;\n            is_resizing_right = false;\n        });\n\n        // Sticky date header\n        $.on(this.$container, 'scroll', (e) => {\n            this.layers.date.setAttribute(\n                'transform',\n                'translate(0,' + e.currentTarget.scrollTop + ')'\n            );\n        });\n\n        this.bind_bar_progress();\n    }\n\n    bind_bar_progress() {\n        let x_on_start = 0;\n        let y_on_start = 0;\n        let is_resizing = null;\n        let bar = null;\n        let $bar_progress = null;\n        let $bar = null;\n\n        $.on(this.$svg, 'mousedown', '.handle.progress', (e, handle) => {\n            is_resizing = true;\n            x_on_start = e.offsetX;\n            y_on_start = e.offsetY;\n\n            const $bar_wrapper = $.closest('.bar-wrapper', handle);\n            const id = $bar_wrapper.getAttribute('data-id');\n            bar = this.get_bar(id);\n\n            $bar_progress = bar.$bar_progress;\n            $bar = bar.$bar;\n\n            $bar_progress.finaldx = 0;\n            $bar_progress.owidth = $bar_progress.getWidth();\n            $bar_progress.min_dx = -$bar_progress.getWidth();\n            $bar_progress.max_dx = $bar.getWidth() - $bar_progress.getWidth();\n        });\n\n        $.on(this.$svg, 'mousemove', (e) => {\n            if (!is_resizing) return;\n            let dx = e.offsetX - x_on_start;\n            let dy = e.offsetY - y_on_start;\n\n            if (dx > $bar_progress.max_dx) {\n                dx = $bar_progress.max_dx;\n            }\n            if (dx < $bar_progress.min_dx) {\n                dx = $bar_progress.min_dx;\n            }\n\n            const $handle = bar.$handle_progress;\n            $.attr($bar_progress, 'width', $bar_progress.owidth + dx);\n            $.attr($handle, 'points', bar.get_progress_polygon_points());\n            $bar_progress.finaldx = dx;\n        });\n\n        $.on(this.$svg, 'mouseup', () => {\n            is_resizing = false;\n            if (!($bar_progress && $bar_progress.finaldx)) return;\n            bar.progress_changed();\n            bar.set_action_completed();\n        });\n    }\n\n    get_all_dependent_tasks(task_id) {\n        let out = [];\n        let to_process = [task_id];\n        while (to_process.length) {\n            const deps = to_process.reduce((acc, curr) => {\n                acc = acc.concat(this.dependency_map[curr]);\n                return acc;\n            }, []);\n\n            out = out.concat(deps);\n            to_process = deps.filter((d) => !to_process.includes(d));\n        }\n\n        return out.filter(Boolean);\n    }\n\n    get_all_parent_tasks(task_id) {\n        const out = [];\n        const to_process = [task_id];\n        const processedTasks = new Set();\n\n        while (to_process.length) {\n            const deps = to_process.reduce((acc, curr) => {\n                acc = acc.concat(this.ancestor_map[curr] || []);\n                return acc;\n            }, []);\n\n            for (const dep of deps) {\n                if (!processedTasks.has(dep)) {\n                    processedTasks.add(dep);\n                    const taskObject = this.get_bar(dep);\n\n                    if (taskObject) {\n                        out.push(taskObject);\n                    }\n\n                    to_process.push(dep);\n                }\n            }\n\n            to_process.shift();\n        }\n\n        return out;\n    }\n\n    get_snap_position(dx) {\n        let odx = dx,\n            rem,\n            position;\n\n        if (this.view_is(VIEW_MODE.WEEK)) {\n            rem = dx % (this.options.column_width / 7);\n            position =\n                odx -\n                rem +\n                (rem < this.options.column_width / 14\n                    ? 0\n                    : this.options.column_width / 7);\n        } else if (this.view_is(VIEW_MODE.MONTH)) {\n            rem = dx % (this.options.column_width / 30);\n            position =\n                odx -\n                rem +\n                (rem < this.options.column_width / 60\n                    ? 0\n                    : this.options.column_width / 30);\n        } else {\n            rem = dx % this.options.column_width;\n            position =\n                odx -\n                rem +\n                (rem < this.options.column_width / 2\n                    ? 0\n                    : this.options.column_width);\n        }\n        return position;\n    }\n\n    unselect_all() {\n        [...this.$svg.querySelectorAll('.bar-wrapper')].forEach((el) => {\n            el.classList.remove('active');\n        });\n    }\n\n    view_is(modes) {\n        if (typeof modes === 'string') {\n            return this.options.view_mode === modes;\n        }\n\n        if (Array.isArray(modes)) {\n            return modes.some((mode) => this.options.view_mode === mode);\n        }\n\n        return false;\n    }\n\n    get_task(id) {\n        return this.tasks.find((task) => {\n            return task.id === id;\n        });\n    }\n\n    get_bar(id) {\n        return this.bars.find((bar) => {\n            return bar.task.id === id;\n        });\n    }\n\n    show_popup(options) {\n        if (!this.popup) {\n            this.popup = new Popup(\n                this.popup_wrapper,\n                this.options.custom_popup_html\n            );\n        }\n        this.popup.show(options);\n    }\n\n    hide_popup() {\n        this.popup && this.popup.hide();\n    }\n\n    trigger_event(event, args) {\n        if (this.options['on_' + event]) {\n            this.options['on_' + event].apply(null, args);\n        }\n    }\n\n    /**\n     * Gets the oldest starting date from the list of tasks\n     *\n     * @returns Date\n     * @memberof Gantt\n     */\n    get_oldest_starting_date() {\n        return this.tasks\n            .map((task) => task._start)\n            .reduce((prev_date, cur_date) =>\n                cur_date <= prev_date ? cur_date : prev_date\n            );\n    }\n\n    /**\n     * Clear all elements from the parent svg element\n     *\n     * @memberof Gantt\n     */\n    clear() {\n        this.$svg.innerHTML = '';\n    }\n}\n\nGantt.VIEW_MODE = VIEW_MODE;\n\nfunction generate_id(task) {\n    return task.name + '_' + Math.random().toString(36).slice(2, 12);\n}\n"],"names":["YEAR","MONTH","DAY","HOUR","MINUTE","SECOND","MILLISECOND","month_names","en","es","it","ru","ptBr","fr","tr","zh","de","hu","date_utils","parse","date","date_separator","time_separator","Date","date_parts","time_parts","parts","split","map","val","parseInt","vals","length","parseFloat","concat","to_string","with_time","TypeError","this","get_date_values","i","padStart","date_string","time_string","format","format_string","lang","values","d","format_map","YYYY","MM","DD","HH","mm","ss","SSS","D","MMMM","MMM","str","formatted_values","Object","keys","sort","a","b","forEach","key","includes","replace","push","value","diff","date_a","date_b","scale","milliseconds","seconds","hours","minutes","days","months","years","endsWith","Math","floor","today","slice","now","add","qty","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","start_of","scores","should_reset","_scale","clone","get_days_in_month","no_of_days","month","year","targetLength","padString","String","repeat","$","expr","con","document","querySelector","createSVG","tag","attrs","elem","createElementNS","attr","append_to","appendChild","innerHTML","setAttribute","animateSVG","svgElement","from","to","animatedSvgElement","dur","begin","animEl","attributeName","animateElement","calcMode","keyTimes","keySplines","cubic_bezier","getAnimationElement","event","createEvent","initEvent","eventName","dispatchEvent","name","ease","linear","on","element","selector","callback","delegate","bind","off","handler","removeEventListener","addEventListener","e","delegatedTarget","target","closest","call","matches","parentNode","getAttribute","Bar","constructor","gantt","task","set_defaults","prepare","draw","pickColorBasedOnBG","bgColor","hex","toString","color","charAt","substring","pickStripeColorBasedOnBG","action_completed","prepare_values","prepare_helpers","invalid","height","options","bar_height","x","compute_x","y","compute_y","corner_radius","bar_corner_radius","duration","_end","_start","step","width","column_width","progress_width","progress","group","class","custom_class","id","bar_group","handle_group","SVGElement","prototype","getX","getY","getWidth","getHeight","getEndX","draw_bar","draw_carets","draw_bar_pattern","draw_progress_bar","draw_label","draw_resize_handles","$bar","rx","ry","style","classList","$bar_progress","requestAnimationFrame","update_label_position","bar","$handle_progress","points","get_progress_polygon_points","join","get_all_dependent_tasks","caretWidth","caretHeight","caretX","caretY","bar_progress","setup_click_event","popup_trigger","show_popup","unselect_all","trigger_event","bar_being_dragged","subtitle","language","target_element","title","update_bar_position","dependencies","dep","get_bar","reduce","prev","curr","update_attr","update_handle_position","update_progressbar_position","update_underlying_bar_position","update_arrow_position","date_changed","changed","new_start_date","new_end_date","compute_start_end_date","Number","progress_changed","new_progress","compute_progress","set_action_completed","setTimeout","x_in_units","gantt_start","width_in_units","task_start","view_is","header_height","padding","_index","get_snap_position","dx","rem","position","odx","isNaN","underBar","label","getBBox","remove","caretElement","caretPoints","handle","arrows","arrow","update","Arrow","from_task","to_task","calculate_path","start_x","condition","start_y","end_x","end_y","from_is_below_to","curve","arrow_curve","clockwise","curve_y","offset","path","down_1","down_2","left","Popup","parent","custom_html","make","hide","pointer","show","Error","html","clientWidth","position_meta","HTMLElement","getBoundingClientRect","top","transform","opacity","VIEW_MODE","QUARTER_DAY","HALF_DAY","WEEK","Gantt","wrapper","tasks","setup_wrapper","setup_options","setup_tasks","change_view_mode","bind_events","svg_element","wrapper_element","$svg","$container","createElement","parentElement","popup_wrapper","default_options","view_modes","view_mode","date_format","custom_popup_html","sortable","assign","originalTasks","visibleTasks","filter","visible","undefined","start","end","every","deps","trim","random","generate_id","setup_dependencies","setup_ancestors","updateTaskVisibility","visibility","console","log","originalTask","find","t","dependency_map","ancestor_map","refresh","mode","update_view_scale","setup_dates","render","scale_view_mode","zoomValue","setup_gantt_dates","setup_date_values","gantt_end","dates","cur_date","bind_grid_click","bind_bar_events","clear","setup_layers","make_grid","make_dates","make_bars","make_arrows","map_arrows_on_bars","set_width","set_scroll_position","layers","layer","make_grid_background","make_grid_rows","make_grid_header","make_grid_ticks","make_grid_highlights","grid_width","grid_height","grid","rows_layer","lines_layer","row_width","row_height","row_y","x1","y1","x2","y2","tick_x","tick_y","tick_height","tick_class","get_dates_to_draw","lower_x","lower_y","lower_text","upper_text","$upper_text","upper_x","upper_y","last_date","get_date_info","date_text","Day_lower","Week_lower","Month_lower","Year_lower","Day_upper","Week_upper","Month_upper","Year_upper","base_pos","x_pos","bars","task_id","dependency","get_task","Boolean","cur_width","actual_width","parent_element","scroll_pos","get_oldest_starting_date","scrollLeft","is_dragging","x_on_start","hide_popup","offsetX","cursor","sort_bars","changed_bars","b0","b1","y_on_start","is_resizing_left","is_resizing_right","parent_bar_id","parent_bars","min_y","max_y","parentBarWrapper","parentTaskId","taskId","dependentBar","toggle","matchingArrows","querySelectorAll","childTaskId","childArrow","bar_wrapper","contains","offsetY","ids","ox","oy","owidth","finaldx","finaldy","get_all_parent_tasks","dy","ancestor_bar","type","max_x","second_x","bar_id","abs","currentTarget","scrollTop","bind_bar_progress","is_resizing","min_dx","max_dx","$handle","out","to_process","acc","processedTasks","Set","has","taskObject","shift","el","modes","Array","isArray","some","popup","args","apply","prev_date"],"mappings":"kCAAA,MAAMA,EAAO,OACPC,EAAQ,QACRC,EAAM,MACNC,EAAO,OACPC,EAAS,SACTC,EAAS,SACTC,EAAc,cAEdC,EAAc,CAChBC,GAAI,CACA,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAEJC,GAAI,CACA,QACA,UACA,QACA,QACA,OACA,QACA,QACA,SACA,aACA,UACA,YACA,aAEJC,GAAI,CACA,UACA,WACA,QACA,SACA,SACA,SACA,SACA,SACA,YACA,UACA,WACA,YAEJC,GAAI,CACA,SACA,UACA,OACA,SACA,MACA,OACA,OACA,SACA,WACA,UACA,SACA,WAEJC,KAAM,CACF,UACA,YACA,QACA,QACA,OACA,QACA,QACA,SACA,WACA,UACA,WACA,YAEJC,GAAI,CACA,UACA,UACA,OACA,QACA,MACA,OACA,UACA,OACA,YACA,UACA,WACA,YAEJC,GAAI,CACA,OACA,QACA,OACA,QACA,QACA,UACA,SACA,UACA,QACA,OACA,QACA,UAEJC,GAAI,CACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,OAEJC,GAAI,CACA,SACA,UACA,OACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAEJC,GAAI,CACA,SACA,UACA,UACA,UACA,QACA,SACA,SACA,YACA,aACA,UACA,WACA,aAIO,IAAAC,EAAA,CACXC,MAAMC,EAAMC,EAAiB,IAAKC,EAAiB,QAC/C,GAAIF,aAAgBG,KAChB,OAAOH,EAEX,GAAoB,iBAATA,EAAmB,CAC1B,IAAII,EAAYC,EAChB,MAAMC,EAAQN,EAAKO,MAAM,KAEzBH,EAAaE,EAAM,GACdC,MAAMN,GACNO,KAAKC,GAAQC,SAASD,EAAK,MAChCJ,EAAaC,EAAM,IAAMA,EAAM,GAAGC,MAAML,GAGxCE,EAAW,GAAKA,EAAW,GAAK,EAEhC,IAAIO,EAAOP,EAUX,OARIC,GAAcA,EAAWO,SACA,GAArBP,EAAWO,SACXP,EAAW,GAAK,KAAOA,EAAW,GAClCA,EAAW,GAAiC,IAA5BQ,WA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"}